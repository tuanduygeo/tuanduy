import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import os

def geo_html_block():
    
    pass   

def magic_square_block():
    st.markdown("""
    ### 5.M√î H√åNH L·∫†C TH∆Ø 3X3 V√Ä B·∫¨C CAO V√î T·∫¨N
    """)

    # Nh·∫≠p b·∫≠c c·ªßa ma ph∆∞∆°ng
    n = st.number_input("Nh·∫≠p b·∫≠c l·∫ª n (>=3):", min_value=3, step=2, value=9)

    def generate_magic_square_southeast(n):
        if n % 2 == 0:
            raise ValueError("Ch·ªâ h·ªó tr·ª£ ma ph∆∞∆°ng b·∫≠c l·∫ª.")

        square = np.zeros((n, n), dtype=int)
        
        # B·∫Øt ƒë·∫ßu t·ª´ v·ªã tr√≠ g·∫ßn t√¢m: (t√¢m h√†ng + 1, t√¢m c·ªôt)
        i, j = n // 2 + 1, n // 2

        for num in range(1, n * n + 1):
            square[i % n, j % n] = num
            
            # V·ªã tr√≠ k·∫ø ti·∫øp theo h∆∞·ªõng ƒê√¥ng Nam
            new_i, new_j = (i + 1) % n, (j + 1) % n

            if square[new_i, new_j] != 0:
                # N·∫øu b·ªã tr√πng, th√¨ nh·∫£y xu·ªëng th√™m 1 h√†ng
                i = (i + 2) % n
            else:
                i, j = new_i, new_j

        return square
    # X√°c ƒë·ªãnh h√†ng v√† c·ªôt trung t√¢m
    center_index = n // 2

    # H√†m t√¥ m√†u c√°c √¥ thu·ªôc h√†ng/c·ªôt trung t√¢m
    def highlight_center(row_or_col, axis='row'):
        return ['background-color: orange' if (i == center_index if axis == 'row' else row_or_col.name == center_index) else '' for i in range(len(row_or_col))]

    # --- MAIN ---
    try:
        square = generate_magic_square_southeast(n)
        df = pd.DataFrame(square)
        st.dataframe(df, use_container_width=False)

        # --- Ki·ªÉm tra t·ªïng ---
        
        row_sums = df.sum(axis=1)
        col_sums = df.sum(axis=0)
        diag1 = np.trace(square)
        diag2 = np.trace(np.fliplr(square))
        magic_const = n * (n ** 2 + 1) // 2

        st.markdown(f"- T·ªïng chu·∫©n (magic constant): **{magic_const}**")
        st.markdown(f"- T·ªïng h√†ng: **{row_sums.iloc[0]}**")
        st.markdown(f"- T·ªïng c·ªôt: **{col_sums.iloc[0]}**")
        st.markdown(f"- T·ªïng ƒë∆∞·ªùng ch√©o ch√≠nh: {diag1}")
        st.markdown(f"- T·ªïng ƒë∆∞·ªùng ch√©o ph·ª•: {diag2}")

        if (
            all(row_sums == magic_const)
            and all(col_sums == magic_const)
            and diag1 == magic_const
            and diag2 == magic_const
        ):
            st.success("Ma ph∆∞∆°ng h·ª£p l·ªá!")
        else:
            st.warning("‚ö†Ô∏è Ma ph∆∞∆°ng n√†y KH√îNG h·ª£p l·ªá.")

        
        # --- B·∫¢NG MODULO 9 ---
        st.markdown("#### B·∫£ng ma ph∆∞∆°ng chia h·∫øt cho 9:")  
        df_mod9 = (df % 9).replace(0, 9)
        st.dataframe(df_mod9, use_container_width=False)
       
        tong_cot_dau = df_mod9.iloc[:, 0].sum()
        st.markdown(f"üßæ T·ªïng m·ªói c·ªôt: **{tong_cot_dau}**")

    except Exception as e:
        st.error(f"L·ªói: {e}")
    pass

def schumann_block():
    """
    Block hi·ªÉn th·ªã c·ªông h∆∞·ªüng Schumann Tr√°i ƒê·∫•t (h√¨nh ·∫£nh, ch√∫ th√≠ch).
    """
    st.markdown("### 3.üåêBi·ªÉu ƒë·ªì c·ªông h∆∞·ªüng Schumann Tr√°i ƒê·∫•t tr·ª±c tuy·∫øn")
    st.image("https://sosrff.tsu.ru/new/shm.jpg", caption="Schumann Resonance - Live", use_container_width=True)

def kp_index_block():
    st.markdown("""
    ### 4.üß≤ D·ªØ li·ªáu ƒë·ªãa t·ª´ tr·ª±c tuy·∫øn""")
    start_date = (datetime.today() - timedelta(days=15)).strftime('%Y-%m-%d')
    end_date = datetime.today().strftime('%Y-%m-%d')
    iframe_url = f"https://imag-data.bgs.ac.uk/GIN_V1/GINForms2?" \
                 f"observatoryIagaCode=PHU&publicationState=Best+available" \
                 f"&dataStartDate={start_date}&dataDuration=30" \
                 f"&samplesPerDay=minute&submitValue=View+%2F+Download&request=DataView"
    # Hi·ªÉn th·ªã trong Streamlit
    st.components.v1.iframe(iframe_url, height=1000,scrolling=True)

    st.markdown("""
    ###  Ch·ªâ s·ªë Kp ‚Äì C·∫£nh b√°o B√£o T·ª´
    """)

    kp_url = "https://services.swpc.noaa.gov/json/planetary_k_index_1m.json"

    def interpret_kp(kp):
        if kp <= 2:
            return "üü¢ R·∫•t an to√†n"
        elif kp == 3:
            return "üü¢ An to√†n"
        elif kp == 4:
            return "üü° Trung b√¨nh ‚Äì ch√∫ √Ω nh·∫π"
        elif kp == 5:
            return "üü† C·∫£nh b√°o nh·∫π ‚Äì B√£o t·ª´ c·∫•p G1"
        elif kp == 6:
            return "üî¥ C·∫£nh b√°o ‚Äì B√£o t·ª´ c·∫•p G2"
        elif kp == 7:
            return "üî¥ Nguy hi·ªÉm ‚Äì B√£o t·ª´ c·∫•p G3"
        elif kp == 8:
            return "üî¥ R·∫•t nguy hi·ªÉm ‚Äì G4"
        else:
            return "üö® C·ª±c k·ª≥ nguy hi·ªÉm ‚Äì G5"

    try:
        kp_data = requests.get(kp_url).json()
        df_kp = pd.DataFrame(kp_data)

        if 'kp_index' in df_kp.columns and not df_kp.empty:
            df_kp['time_tag'] = pd.to_datetime(df_kp['time_tag'])
            df_kp.set_index('time_tag', inplace=True)

            latest_kp = df_kp['kp_index'].iloc[-1]
            st.metric("üåê Kp Index (hi·ªán t·∫°i)", f"{latest_kp}", delta=interpret_kp(latest_kp))

            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì 3 ng√†y g·∫ßn nh·∫•t
            df_kp['date'] = df_kp.index.date
            last_3_days = sorted(df_kp['date'].unique())[-3:]
            df_plot = df_kp[df_kp['date'].isin(last_3_days)]
            st.line_chart(df_plot['kp_index'])

        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt 'kp_index' trong d·ªØ li·ªáu.")
    except Exception as e:
        st.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu Kp Index.")
        st.text(str(e))
    pass
