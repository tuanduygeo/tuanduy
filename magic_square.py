import streamlit as st

def run():
    ### 5.M√î H√åNH L·∫†C TH∆Ø 3X3 V√Ä B·∫¨C CAO V√î T·∫¨N
    """)
    
    # Nh·∫≠p b·∫≠c c·ªßa ma ph∆∞∆°ng
    n = st.number_input("Nh·∫≠p b·∫≠c l·∫ª n (>=3):", min_value=3, step=2, value=3)
    
    def generate_magic_square_southeast(n):
        if n % 2 == 0:
            raise ValueError("Ch·ªâ h·ªó tr·ª£ ma ph∆∞∆°ng b·∫≠c l·∫ª.")
    
        square = np.zeros((n, n), dtype=int)
        
        # B·∫Øt ƒë·∫ßu t·ª´ v·ªã tr√≠ g·∫ßn t√¢m: (t√¢m h√†ng + 1, t√¢m c·ªôt)
        i, j = n // 2 + 1, n // 2
    
        for num in range(1, n * n + 1):
            square[i % n, j % n] = num
            
            # V·ªã tr√≠ k·∫ø ti·∫øp theo h∆∞·ªõng ƒê√¥ng Nam
            new_i, new_j = (i + 1) % n, (j + 1) % n
    
            if square[new_i, new_j] != 0:
                # N·∫øu b·ªã tr√πng, th√¨ nh·∫£y xu·ªëng th√™m 1 h√†ng
                i = (i + 2) % n
            else:
                i, j = new_i, new_j
    
        return square
    # X√°c ƒë·ªãnh h√†ng v√† c·ªôt trung t√¢m
    center_index = n // 2
    
    # H√†m t√¥ m√†u c√°c √¥ thu·ªôc h√†ng/c·ªôt trung t√¢m
    def highlight_center(row_or_col, axis='row'):
        return ['background-color: orange' if (i == center_index if axis == 'row' else row_or_col.name == center_index) else '' for i in range(len(row_or_col))]
    
    # --- MAIN ---
    try:
        square = generate_magic_square_southeast(n)
        df = pd.DataFrame(square)
        st.dataframe(df, use_container_width=False)
    
        # --- Ki·ªÉm tra t·ªïng ---
        
        row_sums = df.sum(axis=1)
        col_sums = df.sum(axis=0)
        diag1 = np.trace(square)
        diag2 = np.trace(np.fliplr(square))
        magic_const = n * (n ** 2 + 1) // 2
    
        st.markdown(f"- T·ªïng chu·∫©n (magic constant): **{magic_const}**")
        st.markdown(f"- T·ªïng h√†ng: **{row_sums.iloc[0]}**")
        st.markdown(f"- T·ªïng c·ªôt: **{col_sums.iloc[0]}**")
        st.markdown(f"- T·ªïng ƒë∆∞·ªùng ch√©o ch√≠nh: {diag1}")
        st.markdown(f"- T·ªïng ƒë∆∞·ªùng ch√©o ph·ª•: {diag2}")
    
        if (
            all(row_sums == magic_const)
            and all(col_sums == magic_const)
            and diag1 == magic_const
            and diag2 == magic_const
        ):
            st.success("Ma ph∆∞∆°ng h·ª£p l·ªá!")
        else:
            st.warning("‚ö†Ô∏è Ma ph∆∞∆°ng n√†y KH√îNG h·ª£p l·ªá.")
    
        
        # --- B·∫¢NG MODULO 9 ---
        st.markdown("#### B·∫£ng ma ph∆∞∆°ng chia h·∫øt cho 9:")  
        df_mod9 = (df % 9).replace(0, 9)
        st.dataframe(df_mod9, use_container_width=False)
       
        tong_cot_dau = df_mod9.iloc[:, 0].sum()
        st.markdown(f"üßæ T·ªïng m·ªói c·ªôt: **{tong_cot_dau}**")
    
    except Exception as e:
        st.error(f"L·ªói: {e}")
    
    
    
    
    st.markdown("""
    ### T√°c gi·∫£ Nguy·ªÖn Duy Tu·∫•n ‚Äì v·ªõi m·ª•c ƒë√≠ch ph·ª•ng s·ª± t√¢m linh v√† c·ªông ƒë·ªìng.SƒêT&ZALO: 0377442597.DONATE: nguyenduytuan techcombank 19033167089018
    """)
