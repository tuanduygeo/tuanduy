import streamlit as st
import os
import pandas as pd
import streamlit.components.v1 as components
import math
from datetime import date, timedelta, datetime
import swisseph as swe
import pytz
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.colors as mcolors
import random
import numpy as np
import requests
import os
import rasterio
from rasterio.windows import from_bounds
from rasterio.enums import Resampling
from pyproj import Transformer
import contextily as ctx
from astrology_utils import astrology_block
from scipy.ndimage import gaussian_filter
import re
import geomag



st.set_page_config(layout="wide")
def get_declination(lat, lon):
    gm = geomag.GeoMag()
    result = gm.GeoMag(lat, lon)
    return result.dec  # ƒê·ªô t·ª´ thi√™n
def extract_phongthuy_data(n_text):
    door_match = re.search(r'C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng ([^<]*)<br>', n_text)
    doors = [h.strip() for h in door_match.group(1).split(',')] if door_match else []
    son_thoai, son_tan, thuy_thoai, thuy_tan = [], [], [], []

    match_son_thoai = re.search(r'3\.Cung v·ªã s∆°n:.*?s∆°n\s+([^<]*)\s+l√† tho√°i th·∫ßn', n_text)
    if match_son_thoai:
        block = match_son_thoai.group(1)
        for ten_loai in block.split(','):
            ten_loai = ten_loai.strip()
            if ten_loai:
                m = re.match(r'([A-Za-z√Ä-·ªπ\s]+)\((t√¥n|t·ª≠)\)', ten_loai)
                if m:
                    son_thoai.append({'son': m.group(1).strip(), 'loai': m.group(2).strip(), 'group': 'tho√°i', 'zone': 'cung v·ªã s∆°n'})
                else:
                    son_thoai.append({'son': ten_loai.strip(), 'loai': None, 'group': 'tho√°i', 'zone': 'cung v·ªã s∆°n'})
    match_son_tan = re.search(r'-\s*s∆°n\s+([^<]*)\s+l√† t·∫•n th·∫ßn', n_text)
    if match_son_tan:
        block = match_son_tan.group(1)
        for ten_loai in block.split(','):
            ten_loai = ten_loai.strip()
            if ten_loai:
                m = re.match(r'([A-Za-z√Ä-·ªπ\s]+)\((t√¥n|t·ª≠)\)', ten_loai)
                if m:
                    son_tan.append({'son': m.group(1).strip(), 'loai': m.group(2).strip(), 'group': 't·∫•n', 'zone': 'cung v·ªã s∆°n'})
                else:
                    son_tan.append({'son': ten_loai.strip(), 'loai': None, 'group': 't·∫•n', 'zone': 'cung v·ªã s∆°n'})
    match_thuy_thoai = re.search(r'4\. C√°c cung v·ªã thu·ª∑:\s*([^<]*)\s+l√† tho√°i th·∫ßn', n_text)
    if match_thuy_thoai:
        block = match_thuy_thoai.group(1)
        for ten_loai in block.split(','):
            ten_loai = ten_loai.strip()
            if ten_loai:
                m = re.match(r'([A-Za-z√Ä-·ªπ\s]+)\((t√¥n|t·ª≠)\)', ten_loai)
                if m:
                    thuy_thoai.append({'son': m.group(1).strip(), 'loai': m.group(2).strip(), 'group': 'tho√°i', 'zone': 'cung v·ªã th·ªßy'})
                else:
                    thuy_thoai.append({'son': ten_loai.strip(), 'loai': None, 'group': 'tho√°i', 'zone': 'cung v·ªã th·ªßy'})
    match_thuy_tan = re.search(r'-\s*C√°c s∆°n\s+([^<]*)\s+l√† t·∫•n th·∫ßn', n_text)
    if match_thuy_tan:
        block = match_thuy_tan.group(1)
        for ten_loai in block.split(','):
            ten_loai = ten_loai.strip()
            if ten_loai:
                m = re.match(r'([A-Za-z√Ä-·ªπ\s]+)\((t√¥n|t·ª≠)\)', ten_loai)
                if m:
                    thuy_tan.append({'son': m.group(1).strip(), 'loai': m.group(2).strip(), 'group': 't·∫•n', 'zone': 'cung v·ªã th·ªßy'})
                else:
                    thuy_tan.append({'son': ten_loai.strip(), 'loai': None, 'group': 't·∫•n', 'zone': 'cung v·ªã th·ªßy'})

    all_son = son_thoai + son_tan + thuy_thoai + thuy_tan
    df_son = pd.DataFrame(all_son) if all_son else pd.DataFrame()
    return doors, df_son


def main():
    
    st.markdown("""
    <div style="background:linear-gradient(90deg,#f9d423,#ff4e50);padding:24px 8px 20px 8px;border-radius:16px;margin-bottom:24px;">
        <h1 style='color:white;text-align:center;margin:0;font-size:36px;'>üîØ ·ª®NG D·ª§NG  ƒê·ªäA L√ù & CHI√äM TINH </h1>
        <p style='color:white;text-align:center;font-size:20px;margin:0;'>T√°c gi·∫£: Nguy·ªÖn Duy Tu·∫•n</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("### 1. ƒê·ªãa m·∫°ch") 
    # 1. t√≠nh ========================
       # --- Giao di·ªán nh·∫≠p ---
    col1, col2, col3, col4 = st.columns([2, 2, 2, 1])
    with col1:
        input_str = st.text_input("Nh·∫≠p x,y", value="")
    with col2:
        dt = st.number_input("dt", min_value=0.001, max_value=0.02, value=0.005, step=0.002, format="%.3f")
    with col4:
        run = st.button("Run", use_container_width=True)
   
    x = y = None
    if input_str:
        try:
            parts = [s.strip() for s in input_str.split(",")]
            if len(parts) == 2:
                x = float(parts[0])
                y = float(parts[1])
        except Exception:
            st.warning("‚ö†Ô∏è C·∫ßn nh·∫≠p ƒë·ªãnh d·∫°ng chu·∫©n (v√≠ d·ª•: 10.123, 106.456)")
    
    if run and x is not None and y is not None:
        try:
            dx = dy = dt
            west, east = y - dx, y + dx
            south, north = x - dy, x + dy
    
            lat_tile = int(north)
            lon_tile = int(east)
            tile = f"{'N' if lat_tile >= 0 else 'S'}{abs(lat_tile):02d}{'E' if lon_tile >= 0 else 'W'}{abs(lon_tile):03d}"
    
            srtm_dir = "dulieu"
            hgt_path = os.path.join(srtm_dir, f"{tile}.hgt")
            out_path = os.path.join(srtm_dir, "vietnamcrop.tif")
    
            if not os.path.exists(hgt_path):
                st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file: `{hgt_path}`.")
            else:
                with rasterio.open(hgt_path) as src:
                    window = from_bounds(west, south, east, north, src.transform)
                    dem_crop = src.read(1, window=window, resampling=Resampling.bilinear)
                    transform = src.window_transform(window)
                    profile = src.profile
    
                profile.update({
                    "driver": "GTiff",
                    "height": dem_crop.shape[0],
                    "width": dem_crop.shape[1],
                    "transform": transform,
                    "nodata": -9999
                })
    
                with rasterio.open(out_path, "w", **profile) as dst:
                    dst.write(dem_crop, 1)
                with rasterio.open(out_path) as data:
                    data_array = data.read(1).astype(np.float64)
                    transform = data.transform
                
                nrows, ncols = data_array.shape
                xt = np.arange(ncols) * transform.a + transform.c + transform.a / 2
                yt = np.arange(nrows) * transform.e + transform.f + transform.e / 2
                Xx, Yx = np.meshgrid(xt, yt)
                
                transformer = Transformer.from_crs("EPSG:4326", "EPSG:3857", always_xy=True)
                Xx3857, Yx3857 = transformer.transform(Xx, Yx)
                
                x_center, y_center = transformer.transform(y, x)  # x=lat, y=lon
                
                radius = dt * 111320
                
                def plot_bearing_circle(ax, x_center, y_center, radius):
                    # 360 v·∫°ch chia, m·ªói 1 ƒë·ªô
                    for deg in range(360):
                        angle = np.deg2rad(deg) - np.pi/2  # ƒê∆∞a 0¬∞ ra ph√≠a B·∫Øc (tr√™n c√πng), thu·∫≠n chi·ªÅu kim ƒë·ªìng h·ªì
                        # X√°c ƒë·ªãnh ƒë·ªô d√†i v·∫°ch
                        if deg % 15 == 0:
                            r0 = radius * 0.99  # V·∫°ch d√†i cho 15¬∞
                            lw = 1.2
                        else:
                            r0 = radius * 0.99  # V·∫°ch ng·∫Øn cho t·ª´ng ƒë·ªô
                            lw = 1
                        r1 = radius * 1.03     # M√©p ngo√†i
                        x0 = x_center + np.cos(angle) * r0
                        y0 = y_center + np.sin(angle) * r0
                        x1 = x_center + np.cos(angle) * r1
                        y1 = y_center + np.sin(angle) * r1
                        ax.plot([x0, x1], [y0, y1], color='white', linewidth=lw, zorder=101)
                        # Hi·ªÉn th·ªã s·ªë ƒë·ªô m·ªói 15¬∞
                        if deg % 15 == 0:
                            xt = x_center + np.cos(angle) * (radius * 1.05)
                            yt = y_center - np.sin(angle) * (radius * 1.05)
                            ax.text(xt, yt, f"{deg}", fontsize=9, color='white', ha='center', va='center',  zorder=45)

                def plot_fibonacci_labels_only(ax, x_center, y_center, labels_inner, radius=radius):
                    n = len(labels_inner)
                    theta = np.linspace(0, 2 * np.pi, n, endpoint=False) + np.pi / 2
                    shift = np.deg2rad(7.5)
                    bold_indices = {1, 4, 7, 10, 13, 16, 19, 22}
                    for i, t in enumerate(theta):
                        lw = 2 if i in bold_indices else 1
                        x0 = x_center + np.cos(t + shift) * radius * 0.85
                        y0 = y_center + np.sin(t + shift) * radius * 0.85
                        x1 = x_center + np.cos(t + shift) * radius * 0.95
                        y1 = y_center + np.sin(t + shift) * radius * 0.95
                        ax.plot([x0, x1], [y0, y1], color='white', linewidth=lw)
                    for r in [0.95, 0.85]:
                        circle_theta = np.linspace(0, 2 * np.pi, 1000)
                        x = x_center + np.cos(-circle_theta) * r * radius
                        y = y_center + np.sin(-circle_theta) * r * radius
                        ax.plot(x, y, color='white', linewidth=1)
                    for t, label in zip(theta, labels_inner):
                        x = x_center + np.cos(t) * radius * 0.9
                        y = y_center + np.sin(t) * radius * 0.9
                        ax.text(x, y, label, ha='center', va='center', fontsize=13, color='white', fontweight='bold')
                    ax.text(x_center, y_center, '+', ha='center', va='center', fontsize=22, color='white', fontweight='bold')
                
                labels_24 = [
                    'T√Ω', 'Nh√¢m', 'H·ª£i', 'C√†n', 'Tu·∫•t', 'T√¢n', 'D·∫≠u', 'Canh',
                    'Th√¢n', 'Kh√¥n', 'M√πi', 'ƒêinh', 'Ng·ªç', 'B√≠nh', 'T·ªµ', 'T·ªën',
                    'Th√¨n', '·∫§t', 'M√£o', 'Gi√°p', 'D·∫ßn', 'C·∫•n', 'S·ª≠u', 'Qu√Ω'
                ]
                
                fig, ax = plt.subplots(figsize=(12, 12))
                x0, x1 = Xx3857.min(), Xx3857.max()
                y0, y1 = Yx3857.min(), Yx3857.max()
                img, ext = ctx.bounds2img(x0, y0, x1, y1, ll=False, source=ctx.providers.Esri.WorldImagery, zoom=18)
                ax.imshow(img, extent=ext, origin="upper")
                ax.set_xlim(x0, x1)
                ax.set_ylim(y0, y1)
                
                # V·∫Ω contour DEM
                levels = np.linspace(data_array.min(), data_array.max(), 21)
                cmap = cm.get_cmap('rainbow')
                norm = mcolors.Normalize(vmin=np.min(levels), vmax=np.max(levels))
                data_smooth = gaussian_filter(data_array, sigma=1.2)
                ax.contourf(Xx3857, Yx3857, data_smooth, cmap="rainbow", levels=levels, alpha=0)
                ax.contour(Xx3857, Yx3857, data_smooth, levels=levels, cmap='rainbow', linewidths=1)
                threshold = np.percentile(data_array, 90)
                threshold1 = np.percentile(data_array, 5)
                for level in levels:
                    if level >= threshold:
                        color = cmap(norm(level))
                        ax.contour(Xx3857, Yx3857, data_smooth, levels=[level], colors=[color], linewidths=4)
                    if level <= threshold1:
                        color = cmap(norm(level))
                        ax.contour(Xx3857, Yx3857, data_smooth, levels=[level], colors=[color], linewidths=3)
                # V·∫Ω v√≤ng Fibonacci
                plot_fibonacci_labels_only(ax, x_center, y_center, labels_24, radius=radius*0.7)
                
                # --- T√¨m ƒëi·ªÉm cao nh·∫•t trong mask ---
                z = data_array  # <-- ƒê·ªìng nh·∫•t bi·∫øn!
                rows, cols = z.shape
                i_idx, j_idx = np.indices((rows, cols))
                xs, ys = rasterio.transform.xy(transform, i_idx, j_idx, offset='center')
                xs = np.array(xs)
                ys = np.array(ys)
                lat0 = x
                lon0 = y
                mask = ((ys - lat0) ** 2 + (xs - lon0) ** 2) <= ((dt/2) ** 2)
                z_flat = z.ravel()
                mask_flat = mask.ravel()
                idx_max = np.argmax(z_flat[mask_flat])
                masked_indices = np.nonzero(mask_flat)[0]
                idx_global = masked_indices[idx_max]
                lat_max = ys.ravel()[idx_global]
                lon_max = xs.ravel()[idx_global]
                
                # Chuy·ªÉn sang EPSG:3857 ƒë·ªÉ v·∫Ω tr√™n ·∫£nh
                x_center_map, y_center_map = transformer.transform(lon0, lat0)
                x_max, y_max = transformer.transform(lon_max, lat_max)
                
               
                # T√≠nh vector h∆∞·ªõng t·ª´ center ƒë·∫øn max
                dx = x_max - x_center_map
                dy = y_max - y_center_map
                length = np.sqrt(dx**2 + dy**2)
                if length == 0:
                    # Tr√°nh chia 0, ch·ªçn h∆∞·ªõng b·∫•t k·ª≥
                    dir_x, dir_y = 1, 0
                else:
                    dir_x = dx / length
                    dir_y = dy / length
                
                # ƒê·∫∑t ƒë·ªô d√†i arrow mong mu·ªën = radius
                arrow_length = radius*0.75   # ho·∫∑c radius*1.2 n·∫øu mu·ªën d√†i h∆°n m·ªôt ch√∫t
                arrow_dx = -dir_x * arrow_length   # ho·∫∑c dir_x n·∫øu mu·ªën c√πng chi·ªÅu
                arrow_dy = -dir_y * arrow_length
                
                # V·∫Ω arrow t·ª´ center ra ngo√†i (ng∆∞·ª£c h∆∞·ªõng max)
                ax.arrow(
                    x_center_map, y_center_map,   # G·ªëc l√† center
                    arrow_dx, arrow_dy,           # Vector chu·∫©n h√≥a, ƒë·ªô d√†i c·ªë ƒë·ªãnh
                    head_width=4,
                    head_length=4,
                    linewidth=2,
                    color='white',
                    length_includes_head=True,
                    zorder=10
                )
                dlon = lon_max - lon0
                dlat = lat_max - lat0
                bearing1 = (np.degrees(np.arctan2(dlon, dlat)) + 360) % 360
                
                declination = get_magnetic_declination(x, y)
                huong = "E" if declination >= 0 else "W"
                declination_str = f"{abs(declination):.1f}¬∞{huong}"
                bearing= (bearing1 +180+ declination) % 360
                st.markdown(f"**Ch·ªâ s·ªë Bearing :** `{bearing:.1f}¬∞`")
                if 337.5<=float(bearing)<352.5:
                    n=(" 1.To·∫° B√≠nh(-2) T·∫•n 6 kim kh·∫Øc xu·∫•t h∆∞·ªõng Nh√¢m -1 thu·ª∑ n√™n l√† c·ª•c to·∫° T·∫•n nghi Tho√°i. H√πng d·ª± H√πng<br>     2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng b√≠nh,t·ªµ, T√¢n, D·∫≠u, m√πi, kh√¥n, S·ª≠u <br>      3.Cung v·ªã s∆°n:            s∆°n nh√¢m, h·ª£i(t√¥n), C·∫•n(t·ª≠), ·∫•t,m√£o(t·ª≠)     l√† tho√°i th·∫ßn <br>  C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh   <br>   -   s∆°n m√πi, kh√¥n, t√¢n, d·∫≠u, s·ª≠u, b√≠nh,t·ªµ    l√† t·∫•n th·∫ßn.<br>C·∫ßn cao , xa <100m.<br>    4. C√°c cung v·ªã thu·ª∑:    t√Ω qu√Ω(t√¥n), th√¢n canh(t·ª≠), tu·∫•t(t·ª≠)   l√† tho√°i th·∫ßn. <br>    C·∫ßn th·∫•p , xa >100m. N·∫øu c√°c th·ªßy n√†y l·∫°i c√≥ s∆°n l√† ph·ª•c ng√¢m, ch·ªß b·∫°i t√†i.<br>     - C√°c s∆°n gi√°p, d·∫ßn, t·ªën,th√¨n, ng·ªç,ƒëinh, c√†n   l√† t·∫•n th·∫ßn. C·∫ßn c√≥ th·ªßy trong 100m." )
                elif 352.5<=float(bearing)<360:
                    n=(" 1.To·∫° Ng·ªç(-6) T·∫•n 6 kim kh·∫Øc xu·∫•t h∆∞·ªõng T√Ω 1 thu·ª∑ n√™n l√† c·ª•c to·∫° T·∫•n nghi Tho√°i. H√πng d·ª± Th∆∞<br>     2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng gi√°p,d·∫ßn,th√¨n,t·ªën,ƒëinh,ng·ªç, c√†n <br>      3.Cung v·ªã s∆°n:          s∆°n qu√Ω, t√Ω(t√¥n), canh,th√¢n(t·ª≠), tu·∫•t(t·ª≠)    l√† tho√°i th·∫ßn <br>  C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br>   -   s∆°n gi√°p, d·∫ßn, t·ªën, ƒëinh,ng·ªç, c√†n    l√† t·∫•n th·∫ßn. <br>    C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   nh√¢m, h·ª£i(t√¥n), c·∫•n(t·ª≠), ·∫•t,m√£o(t·ª≠)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br>  - C√°c s∆°n s·ª≠u, b√≠nh,t·ªµ, m√πi, kh√¥n, t√¢n, d·∫≠u   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 0<=float(bearing)<7.5:
                    n=(" 1.To·∫° Ng·ªç(-1) T·∫•n 6 kim kh·∫Øc xu·∫•t h∆∞·ªõng T√Ω 1 thu·ª∑ n√™n l√† c·ª•c to·∫° T·∫•n nghi Tho√°i. H√πng d·ª± Th∆∞<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng gi√°p,d·∫ßn,th√¨n,t·ªën,ƒëinh,ng·ªç, c√†n <br> 3.Cung v·ªã s∆°n:    s∆°n qu√Ω, t√Ω(t√¥n), canh,th√¢n(t·ª≠), tu·∫•t(t·ª≠)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n gi√°p, d·∫ßn, t·ªën, ƒëinh,ng·ªç, c√†n    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   nh√¢m, h·ª£i(t√¥n), c·∫•n(t·ª≠), ·∫•t,m√£o(t·ª≠)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br>  - C√°c s∆°n s·ª≠u, b√≠nh,t·ªµ, m√πi, kh√¥n, t√¢n, d·∫≠u   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 7.5<=float(bearing)<22.5:
                    n=(" 1.To·∫° ƒêinh(-1) T·∫•n 6 kim kh·∫Øc xu·∫•t h∆∞·ªõng Qu√Ω 1 thu·ª∑ n√™n l√† c·ª•c to·∫° T·∫•n nghi Tho√°i. Th∆∞ d·ª± H√πng<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng gi√°p,d·∫ßn, th√¨n,t·ªën,ƒëinh,ng·ªç, c√†n <br> 3.Cung v·ªã s∆°n:    s∆°n qu√Ω, t√Ω(t√¥n), canh,th√¢n(t·ª≠), tu·∫•t(t·ª≠)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n gi√°p, d·∫ßn, t·ªën, ƒëinh,ng·ªç, c√†n    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   nh√¢m, h·ª£i(t√¥n), c·∫•n(t·ª≠), ·∫•t,m√£o(t·ª≠)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br>  - C√°c s∆°n s·ª≠u, b√≠nh,t·ªµ, m√πi, kh√¥n, t√¢n, d·∫≠u   l√† t·∫•n th·∫ßn.<br>   C·∫ßn th·∫•p, xa< 100m ")
                elif 22.5<=float(bearing)<37.5:
                    n=(" 1.To·∫° M√πi(2) Tho√°i 4 m·ªôc sinh xu·∫•t h∆∞·ªõng S·ª≠u 9 ho·∫£ n√™n l√† c·ª•c to·∫° Tho√°i nghi Tho√°i. H√πng d·ª± H√πng<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng s·ª≠u, b√≠nh,t·ªµ,kh√¥n<br> 3.Cung v·ªã s∆°n:      s∆°n s·ª≠u(t·ª≠), b√≠nh,t·ªµ(t√¥n), kh√¥n(t√¥n) kh·∫Øc xu·∫•t l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n nh√¢m, h·ª£i,c·∫•n,·∫•t,m√£o, m√πi, d·∫≠u,t√¢n    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:    c√†n(t·ª≠), th√¨n(t√¥n), ƒëinh,ng·ªç(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br>  - C√°c s∆°n canh,th√¢n, tu·∫•t, qu√Ω, t√Ω, gi√°p, d·∫ßn, t·ªën   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m  ")
                elif 37.5<=float(bearing)<52.5:
                    n=(" 1.To·∫° Kh√¥n(7) Tho√°i 7 kim sinh xu·∫•t h∆∞·ªõng C·∫•n 2 th·ªï n√™n l√† c·ª•c to·∫° Tho√°i nghi Tho√°i. Th∆∞ d·ª± Th∆∞<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng c·∫•n, ·∫•t,m√£o, nh√¢m, h·ª£i  <br> 3.Cung v·ªã s∆°n:      s∆°n nh√¢m, h·ª£i(t√¥n),c·∫•n(t·ª≠),·∫•t,m√£o(t·ª≠)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n t√¢n, d·∫≠u,s·ª≠u, m√πi, kh√¥n, t·ªã b√≠nh    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:    canh,th√¢n(t·ª≠), tu·∫•t(t·ª≠), qu√Ω, t√Ω(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br> - C√°c s∆°n c√†n,gi√°p, d·∫ßn,t·ªën, ng·ªç,ƒëinh, th√¨n   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m  ")
                elif 52.5<=float(bearing)<67.5:
                    n=(" 1.To·∫° Th√¢n(-6) T·∫•n 8 th·ªï kh·∫Øc xu·∫•t h∆∞·ªõng D·∫ßn 3 m·ªôc n√™n l√† c·ª•c to·∫° T·∫•n nghi Tho√°i. Th∆∞ d·ª± Th∆∞<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng c√†n,th√¨n,ƒëinh,ng·ªç,th√¢n canh, tu·∫•t <br> 3.Cung v·ªã s∆°n:    s∆°n qu√Ω, t√Ω(t·ª≠), gi√°p, d·∫ßn(t√¥n), t·ªën(t√¥n)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n th√¨n, ƒëinh,ng·ªç, c√†n, th√¢n canh, tu·∫•t    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   m√πi(t√¥n), nh√¢m, h·ª£i(t·ª≠),t√¢n, d·∫≠u(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br>- C√°c s∆°n s·ª≠u, b√≠nh,t·ªµ, kh√¥n, m√£o, ·∫•t, c·∫•n   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 67.5<=float(bearing)<82.5:
                    n=(" 1.To·∫° Canh(-1) Tho√°i 8 th·ªï kh·∫Øc xu·∫•t h∆∞·ªõng Gi√°p 3 m·ªôc n√™n l√† c·ª•c to·∫° Tho√°i nghi Tho√°i. H√πng d·ª± H√πng <br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng T√Ω Qu√Ω, gi√°p, d·∫ßn, t·ªën<br> 3.Cung v·ªã s∆°n:    s∆°n qu√Ω, t√Ω(t·ª≠), gi√°p, d·∫ßn(t√¥n), t·ªën(t√¥n)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n c√†n, th√¨n, ƒëinh,ng·ªç, th√¢n canh, tu·∫•t    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   t√¢n, d·∫≠u(t√¥n), nh√¢m, h·ª£i(t·ª≠), m√πi (t√¥n)  l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br>  - C√°c s∆°n s·ª≠u,b√≠nh,t·ªµ, kh√¥n,·∫•t,m√£o, c·∫•n   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 82.5<=float(bearing)<97.5:
                    n=(" 1.To·∫° D·∫≠u(-7) T·∫•n 3 m·ªôc c√πng h√†nh h∆∞·ªõng M√£o 8 th·ªï n√™n l√† c·ª•c to·∫° T·∫•n nghi T·∫•n. H√πng d·ª± Th∆∞<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng nh√¢m, h·ª£i, c·∫•n, ·∫•t, m√£o, d·∫≠u,t√¢n, m√πi  <br> 3.Cung v·ªã s∆°n:      s∆°n s·ª≠u(t·ª≠), b√≠nh,t·ªµ(t√¥n), kh√¥n(t√¥n)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n nh√¢m, h·ª£i, c·∫•n, ·∫•t,m√£o, d·∫≠u,t√¢n, m√πi    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:    c√†n(t·ª≠), th√¨n(t√¥n), ƒëinh,ng·ªç(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br>  - C√°c s∆°n tu·∫•t, qu√Ω, t√Ω, canh,th√¢n, gi√°p, d·∫ßn, tu·∫•t   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 97.5<=float(bearing)<112.5:
                    n=(" 1.To·∫° T√¢n(-2) T·∫•n 3 m·ªôc kh·∫Øc nh·∫≠p h∆∞·ªõng ·∫§t 8 th·ªï n√™n l√† c·ª•c to·∫° T·∫•n nghi T·∫•n. Th∆∞ d·ª± H√πng<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng nh√¢m, h·ª£i, c·∫•n, ·∫•t, m√£o, m√πi, d·∫≠u,t√¢n  <br> 3.Cung v·ªã s∆°n:      s∆°n s·ª≠u(t·ª≠), b√≠nh,t·ªµ(t√¥n), kh√¥n(t√¥n)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n nh√¢m, h·ª£i, c·∫•n, ·∫•t,m√£o, m√πi, d·∫≠u,t√¢n    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:    c√†n(t·ª≠), th√¨n(t√¥n), ƒëinh,ng·ªç(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br>  - C√°c s∆°n tu·∫•t, qu√Ω, t√Ω, canh,th√¢n,gi√°p, d·∫ßn, t·ªën   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 112.5<=float(bearing)<127.5:
                    n=(" 1.To·∫° Tu·∫•t(-6) Tho√°i 2 th·ªï sinh nh·∫≠p h∆∞·ªõng Th√¨n 7 kim n√™n l√† c·ª•c to·∫° Tho√°i nghi T·∫•n. H√πng d·ª± H√πng <br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng qu√Ω, t√Ω, gi√°p, d·∫ßn, t·ªën  <br> 3.Cung v·ªã s∆°n:    s∆°n qu√Ω, t√Ω(t·ª≠), gi√°p, d·∫ßn(t√¥n), t·ªën(t√¥n)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n th√¨n, ƒëinh,ng·ªç, c√†n, th√¢n canh, tu·∫•t    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   nh√¢m, h·ª£i(t·ª≠), m√πi(t√¥n), t√¢n, d·∫≠u(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br>  - C√°c s∆°n s·ª≠u, b√≠nh,t·ªµ, kh√¥n, c·∫•n, m√£o, ·∫•t   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 127.5<=float(bearing)<142.5:
                    n=(" 1.To·∫° C√†n(-1) T·∫•n 9 ho·∫£ sinh nh·∫≠p h∆∞·ªõng T·ªën 4 m·ªôc n√™n l√† c·ª•c to·∫° T·∫•n nghi T·∫•n. Th∆∞ d·ª± Th∆∞<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng qu√Ω, t√Ω, gi√°p, d·∫ßn, t·ªën, c√†n  <br> 3.Cung v·ªã s∆°n:    s∆°n th√¨n(t·ª≠), ƒëinh,ng·ªç(t·ª≠), canh,th√¢n(t√¥n), tu·∫•t(t·ª≠)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n t√Ω qu√Ω, gi√°p, d·∫ßn, t·ªën, c√†n    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   ·∫•t,m√£o(t√¥n), t·ªµ b√≠nh(t·ª≠), kh√¥n(t·ª≠), c·∫•n(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br> - C√°c s∆°n h·ª£i nh√¢m, m√πi, d·∫≠u,t√¢n, s·ª≠u   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 142.5<=float(bearing)<157.5:
                    n=(" 1.To·∫° H·ª£i(2) Tho√°i 1 thu·ª∑ kh·∫Øc nh·∫≠p h∆∞·ªõng T·ªµ 6 kim n√™n l√† c·ª•c to·∫° Tho√°i nghi T·∫•n. Th∆∞ d·ª± Th∆∞<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng m√πi, d·∫≠u,t√¢n, s·ª≠u  <br> 3.Cung v·ªã s∆°n:      s∆°n m√πi(t·ª≠), d·∫≠u,t√¢n(t·ª≠), s·ª≠u(t√¥n)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n nh√¢m, h·ª£i, c·∫•n ,·∫•t,m√£o, b√≠nh,t·ªµ    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:    c√†n(t√¥n), gi√°p, d·∫ßn(t·ª≠), t·ªën(t·ª≠)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br>  .<br> - C√°c s∆°n ƒëinh,ng·ªç, canh,th√¢n, tu·∫•t, qu√Ω, t√Ω, th√¨n   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 157.5<=float(bearing)<172.5:
                    n=(" 1.To·∫° Nh√¢m(7) T·∫•n 1 thu·ª∑ kh·∫Øc nh·∫≠p h∆∞·ªõng B√≠nh 6 kim n√™n l√† c·ª•c to·∫° T·∫•n nghi T·∫•n. H√πng d·ª± H√πng<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng nh√¢m,c·∫•n,·∫•t,m√£o, b√≠nh,t·ªµ, kh√¥n, nh√¢m, h·ª£i  <br> 3.Cung v·ªã s∆°n:      s∆°n s·ª≠u(t√¥n), m√πi(t·ª≠), t√¢n, d·∫≠u(t·ª≠)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n nh√¢m, c·∫•n, ·∫•t,m√£o, b√≠nh,t·ªµ, kh√¥n, nh√¢m, h·ª£i    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:    gi√°p, d·∫ßn(t·ª≠), t·ªën(t·ª≠), c√†n(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br> - C√°c s∆°n qu√Ω, t√Ω, th√¨n, ƒëinh,ng·ªç, canh,th√¢n, tu·∫•t   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 172.5<=float(bearing)<187.5:
                    n=(" 1.To·∫° T√Ω(1) T·∫•n 1 thu·ª∑ kh·∫Øc nh·∫≠p h∆∞·ªõng Ng·ªç 6 kim n√™n l√† c·ª•c to·∫° T·∫•n nghi T·∫•n. Th∆∞ d·ª± H√πng<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng qu√Ω, t√Ω, th√¨n, ƒëinh,ng·ªç, canh,th√¢n, tu·∫•t  <br> 3.Cung v·ªã s∆°n:    s∆°n c√†n(t√¥n), gi√°p, d·∫ßn(t·ª≠), t·ªën(t·ª≠)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n qu√Ω, t√Ω, th√¨n, ƒëinh,ng·ªç, canh,th√¢n, tu·∫•t    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   s·ª≠u(t√¥n), m√πi(t·ª≠), t√¢n, d·∫≠u(t·ª≠)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br> - C√°c s∆°n nh√¢m, c·∫•n, ·∫•t,m√£o, b√≠nh,t·ªµ, kh√¥n, nh√¢m, h·ª£i   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 187.5<=float(bearing)<202.5:
                    n=(" 1.To·∫° Qu√Ω(6) Tho√°i 1 thu·ª∑ kh·∫Øc nh·∫≠p  h∆∞·ªõng ƒêinh 6 kim n√™n l√† c·ª•c to·∫° Tho√°i nghi T·∫•n. H√πng d·ª± Th∆∞<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng gi√°p, d·∫ßn, t·ªën, c√†n <br> 3.Cung v·ªã s∆°n:    s∆°n c√†n(t√¥n), gi√°p, d·∫ßn(t·ª≠), t·ªën(t·ª≠)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n qu√Ω, t√Ω, th√¨n, ƒëinh,ng·ªç, canh,th√¢n, tu·∫•t    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   s·ª≠u(t√¥n), m√πi(t·ª≠), t√¢n, d·∫≠u(t·ª≠)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br>  .<br> - C√°c s∆°n nh√¢m, c·∫•n, ·∫•t,m√£o, b√≠nh,t·ªµ, kh√¥n, nh√¢m, h·ª£i   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 202.5<=float(bearing)<217.5:
                    n=(" 1.To·∫° S·ª≠u(-7) T·∫•n 9 ho·∫£ sinh nh·∫≠p h∆∞·ªõng M√πi 4 m·ªôc n√™n l√† c·ª•c to·∫° T·∫•n nghi T·∫•n. H√πng d·ª± H√πng<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng t√¢n, d·∫≠u, nh√¢m, h·ª£i, s·ª≠u, m√πi  <br> 3.Cung v·ªã s∆°n:      s∆°n kh√¥n(t·ª≠), ·∫•t,m√£o(t√¥n), b√≠nh,t·ªµ(t·ª≠), c·∫•n(t√¥n)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n t√¢n, d·∫≠u, nh√¢m, h·ª£i, s·ª≠u, m√πi    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:    ƒëinh,ng·ªç(t·ª≠), canh,th√¢n(t√¥n), tu·∫•t(t√¥n), th√¨n(t·ª≠)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br> - C√°c s∆°n c√†n, qu√Ω, t√Ω, gi√°p, d·∫ßn, t·ªën   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 217.5<=float(bearing)<232.5:
                    n=(" 1.To·∫° C·∫•n(-2) Tho√°i 2 th·ªï sinh nh·∫≠p h∆∞·ªõng Kh√¥n 7 kim n√™n l√† c·ª•c to·∫° Tho√°i nghi T·∫•n. Th∆∞ d·ª± Th∆∞<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng m√πi, t√¢n, d·∫≠u, nh√¢m, h·ª£i <br> 3.Cung v·ªã s∆°n:      s∆°n m√πi(t√¥n), t√¢n, d·∫≠u(t√¥n), nh√¢m, h·ª£i(t·ª≠)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n kh√¥n, c·∫•n s·ª≠u, ·∫•t,m√£o, b√≠nh,t·ªµ    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:    qu√Ω, t√Ω(t·ª≠), gi√°p, d·∫ßn(t√¥n), t·ªën(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br>  - C√°c s∆°n ƒëinh,ng·ªç, canh,th√¢n, tu·∫•t, th√¨n, c√†n   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 232.5<=float(bearing)<247.5:
                    n=(" 1.To·∫° D·∫ßn(1) T·∫•n 3 m·ªôc kh·∫Øc nh·∫≠p h∆∞·ªõng Th√¢n 8 th·ªï n√™n l√† c·ª•c to·∫° T·∫•n nghi T·∫•n. Th∆∞ d·ª± Th∆∞<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng tu·∫•t, qu√Ω, t√Ω, canh,th√¢n, gi√°p, d·∫ßn, t·ªën  <br> 3.Cung v·ªã s∆°n:    s∆°n c√†n(t·ª≠), th√¨n(t√¥n), ƒëinh,ng·ªç(t√¥n)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n tu·∫•t, qu√Ω, t√Ω, canh,th√¢n, gi√°p, d·∫ßn, t·ªën    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   s·ª≠u(t·ª≠), b√≠nh,t·ªµ(t√¥n), kh√¥n(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br> - C√°c s∆°n nh√¢m, h·ª£i, c·∫•n, ·∫•t,m√£o, d·∫≠u,t√¢n, m√πi   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 247.5<=float(bearing)<262.5:
                    n=(" 1.To·∫° Gi√°p(6) T·∫•n 3 m·ªôc kh·∫Øc nh·∫≠p h∆∞·ªõng Canh 8 th·ªï n√™n l√† c·ª•c to·∫° T·∫•n nghi T·∫•n. H√πng d·ª± H√πng<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng tu·∫•t, qu√Ω, t√Ω, canh,th√¢n, gi√°p, d·∫ßn, t·ªën  <br> 3.Cung v·ªã s∆°n:    s∆°n c√†n(t·ª≠), th√¨n(t√¥n), ƒëinh,ng·ªç(t√¥n)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n tu·∫•t, qu√Ω, t√Ω, canh,th√¢n, gi√°p, d·∫ßn, t·ªën    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   s·ª≠u(t·ª≠), b√≠nh,t·ªµ(t√¥n), kh√¥n(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br> - C√°c s∆°n nh√¢m, h·ª£i, c·∫•n, ·∫•t,m√£o, d·∫≠u,t√¢n, m√πi   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 262.5<=float(bearing)<277.5:
                    n=(" 1.To·∫° M√£o(2) Tho√°i 8 th·ªï kh·∫Øc xu·∫•t h∆∞·ªõng D·∫≠u 3 m·ªôc n√™n l√† c·ª•c to·∫° Tho√°i nghi Tho√°i. Th∆∞ d·ª± H√πng<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng m√πi, t√¢n, d·∫≠u, nh√¢m, h·ª£i  <br> 3.Cung v·ªã s∆°n:      s∆°n m√πi(t√¥n), t√¢n, d·∫≠u(t√¥n), nh√¢m, h·ª£i(t·ª≠)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n kh√¥n, c·∫•n s·ª≠u, ·∫•t,m√£o, b√≠nh,t·ªµ    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:    qu√Ω, t√Ω(t·ª≠), gi√°p, d·∫ßn(t√¥n), t·ªën(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br> - C√°c s∆°n ƒëinh,ng·ªç, canh,th√¢n, tu·∫•t, th√¨n, c√†n   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 277.5<=float(bearing)<292.5:
                    n=(" 1.To·∫° ·∫§t(7) T·∫•n 8 th·ªï kh·∫Øc xu·∫•t h∆∞·ªõng T√¢n 3 m·ªôc n√™n l√† c·ª•c to·∫° T·∫•n nghi Tho√°i. H√πng d·ª± th∆∞<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng kh√¥n, c·∫•n s·ª≠u, ·∫•t,m√£o, b√≠nh,t·ªµ <br> 3.Cung v·ªã s∆°n:      s∆°n m√πi(t√¥n), t√¢n, d·∫≠u(t√¥n), nh√¢m, h·ª£i(t·ª≠)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n kh√¥n, c·∫•n s·ª≠u, ·∫•t,m√£o, b√≠nh,t·ªµ    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:    qu√Ω, t√Ω(t·ª≠), gi√°p, d·∫ßn(t√¥n), t·ªën(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br> - C√°c s∆°n ƒëinh,ng·ªç, canh,th√¢n, tu·∫•t, th√¨n, c√†n   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 292.5<=float(bearing)<307.5:
                    n=(" 1.To·∫° Th√¨n(1) Tho√°i 7 kim sinh xu·∫•t h∆∞·ªõng Tu·∫•t 2 th·ªï n√™n l√† c·ª•c to·∫° Tho√°i nghi Tho√°i. H√πng d·ª± H√πng<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng canh,th√¢n, tu·∫•t, qu√Ω, t√Ω  <br> 3.Cung v·ªã s∆°n:    s∆°n qu√Ω, t√Ω(t√¥n), canh,th√¢n(t·ª≠), tu·∫•t(t·ª≠)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n c√†n, gi√°p, d·∫ßn, ƒëinh,ng·ªç, t·ªën,th√¨n    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   nh√¢m, h·ª£i(t√¥n), c·∫•n(t·ª≠), ·∫•t,m√£o(t·ª≠)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br> - C√°c s∆°n s·ª≠u, b√≠nh,t·ªµ, m√πi, kh√¥n, t√¢n, d·∫≠u   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                elif 307.5<=float(bearing)<322.5:
                    n=(" 1.To·∫° T·ªën(6) Tho√°i 4 m·ªôc sinh xu·∫•t h∆∞·ªõng C√†n 9 h·ªèa n√™n l√† c·ª•c to·∫° Tho√°i nghi Tho√°i. Th∆∞ d·ª± Th∆∞<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng c√†n, th√¨n, ƒëinh,ng·ªç <br> 3.Cung v·ªã s∆°n:    s∆°n c√†n(t·ª≠), th√¨n(t√¥n), ƒëinh,ng·ªç(t√¥n)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n tu·∫•t, qu√Ω, t√Ω, canh,th√¢n, gi√°p, d·∫ßn, t·ªën    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:   s·ª≠u(t·ª≠), b√≠nh,t·ªµ(t√¥n), kh√¥n(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br> - C√°c s∆°n nh√¢m, h·ª£i, c·∫•n, ·∫•t,m√£o, d·∫≠u, t√¢n, m√πi   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")
                else:
                    n=(" 1.To·∫° T·ªµ(-7) T·∫•n 6 kim kh·∫Øc xu·∫•t h∆∞·ªõng H·ª£i 1 thu·ª∑ n√™n l√† c·ª•c to·∫° T·∫•n nghi Tho√°i. Th∆∞ d·ª± Th∆∞<br> 2. C·ª≠a ch√≠nh,ph·ª•: M·ªü ·ªü h∆∞·ªõng m√πi, kh√¥n, t√¢n, d·∫≠u, b√≠nh,t·ªµ, s·ª≠u <br> 3.Cung v·ªã s∆°n:      s∆°n nh√¢m, h·ª£i(t√¥n), c·∫•n(t·ª≠), ·∫•t,m√£o(t·ª≠)    l√† tho√°i th·∫ßn <br> C·∫ßn cao, xa> 100m kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng ƒëinh <br> -   s∆°n m√πi, kh√¥n, t√¢n, d·∫≠u, b√≠nh t√Ω, s·ª≠u    l√† t·∫•n th·∫ßn. <br> C·∫ßn cao , xa <100m.  <br>4. C√°c cung v·ªã thu·ª∑:    canh,th√¢n(t·ª≠), tu·∫•t(t·ª≠), qu√Ω, t√Ω(t√¥n)   l√† tho√°i th·∫ßn. <br> C·∫ßn th·∫•p , xa >100m. kh√¥ng ƒë√°p ·ª©ng ·∫£nh h∆∞·ªüng t√†i<br> - C√°c s∆°n ƒëinh,ng·ªç, c√†n, gi√°p, d·∫ßn, t·ªën,th√¨n   l√† t·∫•n th·∫ßn.<br> C·∫ßn th·∫•p, xa< 100m ")

                doors, df_son = extract_phongthuy_data(n)
                
                def get_label_index(name, labels_24):
                    for i, n in enumerate(labels_24):
                        # N·∫øu t√™n c·ª≠a n·∫±m trong nh√£n (vd: "B√≠nh" tr√πng "B√≠nh", ho·∫∑c "B√≠nh Ng·ªç" c≈©ng match "B√≠nh")
                        if name.strip() in n:
                            return i
                    return None
                
                radius_icon = radius*0.75
                theta = np.linspace(0, 2*np.pi, len(labels_24), endpoint=False) + np.pi/2
                def chuan_hoa_ten(ten):
                    # Ch·ªâ in hoa k√Ω t·ª± ƒë·∫ßu, c√≤n l·∫°i th∆∞·ªùng (t·ªët nh·∫•t cho tr∆∞·ªùng h·ª£p ti·∫øng Vi·ªát kh√¥ng d·∫•u)
                    return ten.strip().capitalize()
                
                doors = [chuan_hoa_ten(d) for d in doors]
                for door in doors:
                    idx = get_label_index(door, labels_24)
                    if idx is not None:
                        angle = theta[idx]
                        x_icon = x_center + np.cos(angle)*radius_icon
                        y_icon = y_center + np.sin(angle)*radius_icon
                        ax.text(x_icon, y_icon, "C·ª≠a", ha='center', va='center', fontsize=14, color='purple',fontweight='bold', zorder=99)
                if not df_son.empty:
                    df_son['son'] = df_son['son'].apply(chuan_hoa_ten)
                    for _, row in df_son.iterrows():
                        idx = get_label_index(row['son'], labels_24)
                        if idx is not None:
                            angle = theta[idx]
                            # --- X√°c ƒë·ªãnh b√°n k√≠nh v·∫Ω icon ---
                            if (row['group'] == "t·∫•n"):
                                r_icon = radius*0.2     # 100m t√≠nh t·ª´ t√¢m (theo h·ªá metric c·ªßa map EPSG:3857)
                            else:
                                r_icon = radius_icon*1.2  # M·∫∑c ƒë·ªãnh
                    
                            x_icon = x_center + np.cos(angle) * r_icon
                            y_icon = y_center + np.sin(angle) * r_icon
                    
                            # --- Icon & m√†u s·∫Øc ---
                            if row['zone'] == "cung v·ªã s∆°n" and row['group'] == "tho√°i":
                                icon = "S∆°n"
                                color = "#ffd600"
                            elif row['zone'] == "cung v·ªã s∆°n" and row['group'] == "t·∫•n":
                                icon = "S"
                                color = "#e65100"
                            elif row['zone'] == "cung v·ªã th·ªßy" and row['group'] == "tho√°i":
                                icon = "Th·ªßy"
                                color = "#00b8d4"
                            elif row['zone'] == "cung v·ªã th·ªßy" and row['group'] == "t·∫•n":
                                icon = "T"
                                color = "#01579b"
                            else:
                                continue
                    
                            ax.text(
                                x_icon, y_icon, icon,
                                ha='center', va='center',
                                fontsize=14,
                                fontweight='bold',
                                zorder=98,
                                color=color
                            )   
                      
    
            if not df_son.empty:
                df_son['son'] = df_son['son'].apply(chuan_hoa_ten)
                # T√≠nh median ƒë·ªãa h√¨nh
                median_z = np.median(data_array)
                diem_tong = 0
                diem_chi_tiet = []
            
                for _, row in df_son.iterrows():
                    idx = get_label_index(row['son'], labels_24)
                    if idx is not None:
                        # L·∫•y v·ªã tr√≠ pixel theo ch·ªâ s·ªë idx tr√™n v√≤ng 24
                        # T√¨m g√≥c
                        angle = theta[idx]
                        # L·∫•y v·ªã tr√≠ tr√™n b·∫£n ƒë·ªì (v√≤ng tr√≤n c√°ch t√¢m b√°n k√≠nh radius*0.7)
                        px = x_center + np.cos(angle)*radius*0.7
                        py = y_center + np.sin(angle)*radius*0.7
                        # Chuy·ªÉn ƒë·ªïi ng∆∞·ª£c v·ªÅ lat,lon (EPSG:3857 -> EPSG:4326)
                        lon_px, lat_px = transformer.transform(px, py, direction="INVERSE")
                        # T√¨m ch·ªâ s·ªë g·∫ßn nh·∫•t tr√™n l∆∞·ªõi DEM
                        i = np.argmin(np.abs(yt - lat_px))
                        j = np.argmin(np.abs(xt - lon_px))
                        value = data_array[i, j]
            
                        # T√≠nh ƒëi·ªÉm
                        if row['zone'] == "cung v·ªã s∆°n":
                            if value > median_z:
                                diem = 1
                            else:
                                diem = -1
                        elif row['zone'] == "cung v·ªã th·ªßy":
                            if value > median_z:
                                diem = -1
                            else:
                                diem = 1
                        else:
                            diem = 0
                        diem_tong += diem
                        diem_chi_tiet.append({
                            'son': row['son'],
                            'zone': row['zone'],
                            'group': row['group'],
                            'giatri': value,
                            'median': median_z,
                            'diem': diem
                        })
            
                # Hi·ªÉn th·ªã t·ªïng ƒëi·ªÉm
                st.markdown(f"### üî¢ T·ªïng ƒëi·ªÉm phong th·ªßy: `{diem_tong}`")
                


                
                ax.set_axis_off()
                scale_length = 100  # 100m
                # Ch·ªçn v·ªã tr√≠ ƒë·∫∑t scale bar (·ªü g√≥c tr√°i d∆∞·ªõi)
                x_start = x0 + 10   # c√°ch m√©p tr√°i 30m cho ƒë·∫πp, t√πy b·∫°n ch·ªânh
                y_start = y0 + 20   # c√°ch m√©p d∆∞·ªõi 30m cho ƒë·∫πp, t√πy b·∫°n ch·ªânh
                x_end = x_start + scale_length
                ax.set_title(f"S∆° ƒë·ªì ƒë·ªãa m·∫°ch ({x:.6f}, {y:.6f}) | Hi·ªáu s·ªë: {diem_tong}| ƒê·ªô t·ª´ thi√™n: {declination_str}¬∞", 
             fontsize=16, fontweight='bold', color='#f9d423', pad=18)
                # V·∫Ω thanh th∆∞·ªõc
                ax.plot([x_start, x_end], [y_start, y_start], color='white', linewidth=4, solid_capstyle='round', zorder=20)
                # V·∫Ω hai g·∫°ch ƒë·ª©ng ·ªü hai ƒë·∫ßu (n·∫øu th√≠ch)
                ax.plot([x_start, x_start], [y_start-10, y_start+10], color='white', linewidth=2, zorder=20)
                ax.plot([x_end, x_end], [y_start-10, y_start+10], color='white', linewidth=2, zorder=20)
                # Th√™m ch√∫ th√≠ch "100m"
                ax.text((x_start + x_end)/2, y_start-+5, "100m", color='white', fontsize=14,fontweight='bold', ha='center', va='top', zorder=21)
                plot_bearing_circle(ax, x_center, y_center, radius*0.665)
                plt.tight_layout()
                st.pyplot(fig)
                st.markdown(f"**Ch√∫ gi·∫£i phong th·ªßy:**<br>{n}", unsafe_allow_html=True)
                # N·∫øu mu·ªën hi·ªÉn th·ªã chi ti·∫øt:
                df_diem = pd.DataFrame(diem_chi_tiet)
                if not df_diem.empty:
                    st.dataframe(df_diem)
                plt.close(fig)
        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
  
    st.markdown("### 2. Chi√™m tinh ·∫§n ƒê·ªô")
    astrology_block()
    st.markdown("""
    ### 3.üåêBi·ªÉu ƒë·ªì c·ªông h∆∞·ªüng Schumann 
    Ngu·ªìn: [Tomsk, Russia Space Observing System]
    """)
    st.image("https://sosrff.tsu.ru/new/shm.jpg", caption="Schumann Resonance - Live", use_container_width=True)
    st.markdown("""### T√°c gi·∫£ Nguy·ªÖn Duy Tu·∫•n ‚Äì v·ªõi m·ª•c ƒë√≠ch ph·ª•ng s·ª± t√¢m linh v√† c·ªông ƒë·ªìng. 
    D·ªØ li·ªáu code ngu·ªìn kh√¥ng sao ch√©p d∆∞·ªõi m·ªçi h√¨nh th·ª©c. 
    SƒêT&ZALO: 0377442597. 
    DONATE: nguyenduytuan techcombank 19033167089018
    """)

if __name__ == "__main__":
    main()
