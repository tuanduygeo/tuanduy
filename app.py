import streamlit as st
import os
import pandas as pd
import streamlit.components.v1 as components
import math
from datetime import date, timedelta, datetime
import swisseph as swe


st.set_page_config(layout="wide")
st.title("üß≠ PHONG TH·ª¶Y ƒê·ªäA L√ù ‚Äì B·∫¢N ƒê·ªí ƒê·ªäA M·∫†CH")

st.markdown("""
### üìå H∆∞·ªõng d·∫´n
- Danh s√°ch 200 c√¥ng tr√¨nh ƒë∆∞·ª£c th∆∞·ªùng xuy√™n thay ƒë·ªïi/ 4900 c√¥ng tr√¨nh t√¢m linh ƒë∆∞·ª£c t√°c gi·∫£ thu th·∫≠p t·∫°i Vi·ªát Nam.
- C√¥ng ngh·ªá: ·ª®ng d·ª•ng c√¥ng ngh·ªá t·ª± ƒë·ªông h√≥a ƒë·ªãa kh√¥ng gian ƒë·ªÉ x√°c ƒë·ªãnh vector c√°c h∆∞·ªõng ƒë·ªãa m·∫°ch t·ª± ƒë·ªông t·∫°i c√°c c√¥ng tr√¨nh.
- Phi√™n b·∫£n: V1.0 phi√™n b·∫£n web ∆∞u ti√™n s·ªë li·ªáu nh·∫π, vector h∆∞·ªõng m·∫°ch mang t√≠nh tham kh·∫£o- kh√¥ng ch√≠nh x√°c tuy·ªát ƒë·ªëi.
- C√°ch d√πng: C√°c b·∫°n ch·ªçn trang ‚Üí B·∫•m `Xem` ‚Üí B·∫£n ƒë·ªì s·∫Ω hi·ªÉn th·ªã b√™n d∆∞·ªõi.
""")

# Kh·ªüi t·∫°o session state
if "selected_idx" not in st.session_state:
    st.session_state.selected_idx = None

# Th∆∞ m·ª•c ch·ª©a HTML
html_dir = "dulieu"
html_files = sorted([f for f in os.listdir(html_dir) if f.endswith(".html")])
df = pd.DataFrame({"T√™n c√¥ng tr√¨nh": html_files})

# T√¨m ki·∫øm
search = st.text_input("üîç T√¨m c√¥ng tr√¨nh:", "").lower()
if search:
    df = df[df["T√™n c√¥ng tr√¨nh"].str.lower().str.contains(search)]
    st.session_state.selected_idx = None  # reset khi t√¨m

# Ph√¢n trang
per_page = 10
total_pages = math.ceil(len(df) / per_page)
page = st.number_input(f"üìÑ Trang (1‚Äì{total_pages}):", min_value=1, max_value=total_pages, value=1, step=1)

start_idx = (page - 1) * per_page
end_idx = start_idx + per_page
df_page = df.iloc[start_idx:end_idx]

# Hi·ªÉn th·ªã danh s√°ch t·ª´ng trang
for i, (_, row) in enumerate(df_page.iterrows()):
    idx = start_idx + i
    col1, col2 = st.columns([5, 1])
    with col1:
        st.markdown(f"üî∏ **{row['T√™n c√¥ng tr√¨nh']}**")
    with col2:
        if st.button("Xem", key=row['T√™n c√¥ng tr√¨nh']):
            st.session_state.selected_idx = idx

# Hi·ªÉn th·ªã b·∫£n ƒë·ªì
if "selected_idx" not in st.session_state:
    st.session_state.selected_idx = None

# N·∫øu c√≥ danh s√°ch HTML
if html_files:
    df = pd.DataFrame({"T√™n c√¥ng tr√¨nh": html_files})

    # N·∫øu ch∆∞a ch·ªçn g√¨ ‚Üí hi·ªÉn th·ªã m·∫∑c ƒë·ªãnh b·∫£n ƒë·ªì ƒë·∫ßu ti√™n
    if st.session_state.selected_idx is None:
        default_html = html_files[0]
        html_path = os.path.join(html_dir, default_html)
        st.subheader(f"üìç B·∫£n ƒë·ªì m·∫∑c ƒë·ªãnh: {default_html}")
        with open(html_path, 'r', encoding='utf-8') as f:
            html_content = f.read()
            components.html(html_content, height=800, scrolling=True)

    # N·∫øu ƒë√£ ch·ªçn ‚Üí hi·ªÉn th·ªã b·∫£n ƒë·ªì c√≥ n√∫t ti·∫øn l√πi
    else:
        selected_html = df.iloc[st.session_state.selected_idx]['T√™n c√¥ng tr√¨nh']

        col1, _, col3 = st.columns([1, 6, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è L√πi") and st.session_state.selected_idx > 0:
                st.session_state.selected_idx -= 1
                st.rerun()
        with col3:
            if st.button("Ti·∫øn ‚û°Ô∏è") and st.session_state.selected_idx < len(df) - 1:
                st.session_state.selected_idx += 1
                st.rerun()

        st.markdown("---")
        st.subheader(f"üó∫Ô∏è B·∫£n ƒë·ªì: {selected_html}")
        html_path = os.path.join(html_dir, selected_html)
        with open(html_path, 'r', encoding='utf-8') as f:
            html_content = f.read()
            components.html(html_content, height=800, scrolling=True)
else:
    st.warning("Kh√¥ng t√¨m th·∫•y file HTML n√†o trong th∆∞ m·ª•c 'dulieu/'")

# --- SCHUMANN RESONANCE ---
st.markdown("""
### 2.üåêBi·ªÉu ƒë·ªì c·ªông h∆∞·ªüng Schumann Tr√°i ƒê·∫•t tr·ª±c tuy·∫øn
Ngu·ªìn: [Tomsk, Russia ‚Äì Space Observing System]
""")
st.image("https://sosrff.tsu.ru/new/shm.jpg", caption="Schumann Resonance - Live", use_container_width=True)
# --- ƒê·ªäA T·ª™ TR·∫†M PH√ö TH·ªå (INTERMAGNET) ---
st.markdown("""
### 3.üß≤ D·ªØ li·ªáu ƒë·ªãa t·ª´ tr·ª±c tuy·∫øn""")
start_date = (datetime.today() - timedelta(days=30)).strftime('%Y-%m-%d')
end_date = datetime.today().strftime('%Y-%m-%d')
iframe_url = f"https://imag-data.bgs.ac.uk/GIN_V1/GINForms2?observatoryIagaCode=PHU&publicationState=Best+available&dataStartDate={start_date}&dataDuration=30&samplesPerDay=minute&submitValue=View+%2F+Download&request=DataView"
st.components.v1.iframe(iframe_url, height=1200,scrolling=True)
st.markdown("""
### 4.Jyotish""")

# ==== Thi·∫øt l·∫≠p ====
swe.set_ephe_path("ephe")
swe.set_sid_mode(swe.SIDM_LAHIRI)

# T·ªça ƒë·ªô sinh
latitude = 21.0
longitude = 105.8
timezone = 7

rashis = ["‚ôà Aries", "‚ôâ Taurus", "‚ôä Gemini", "‚ôã Cancer", "‚ôå Leo", "‚ôç Virgo", "‚ôé Libra", "‚ôè Scorpio",
          "‚ôê Sagittarius", "‚ôë Capricorn", "‚ôí Aquarius", "‚ôì Pisces"]

nakshatras = ["Ashwini", "Bharani", "Krittika", "Rohini", "Mrigashirsha", "Ardra", "Punarvasu", "Pushya", "Ashlesha",
              "Magha", "Purva Phalguni", "Uttara Phalguni", "Hasta", "Chitra", "Swati", "Vishakha", "Anuradha",
              "Jyeshtha", "Mula", "Purva Ashadha", "Uttara Ashadha", "Shravana", "Dhanishta", "Shatabhisha",
              "Purva Bhadrapada", "Uttara Bhadrapada", "Revati"]

planets = {
    'Sun': swe.SUN, 'Moon': swe.MOON, 'Mars': swe.MARS, 'Mercury': swe.MERCURY,
    'Jupiter': swe.JUPITER, 'Venus': swe.VENUS, 'Saturn': swe.SATURN, 'Rahu': swe.MEAN_NODE
}

dignities = {
    "Sun": {"v∆∞·ª£ng": "Leo", "t∆∞·ªõng": "Aries", "t√π": "Libra", "t·ª≠": "Aquarius"},
    "Moon": {"v∆∞·ª£ng": "Cancer", "t∆∞·ªõng": "Taurus", "t√π": "Scorpio", "t·ª≠": "Capricorn"},
    "Mars": {"v∆∞·ª£ng": "Aries", "t∆∞·ªõng": "Capricorn", "t√π": "Cancer", "t·ª≠": "Libra"},
    "Mercury": {"v∆∞·ª£ng": "Gemini", "t∆∞·ªõng": "Virgo", "t√π": "Pisces", "t·ª≠": "Sagittarius"},
    "Jupiter": {"v∆∞·ª£ng": "Sagittarius", "t∆∞·ªõng": "Cancer", "t√π": "Capricorn", "t·ª≠": "Gemini"},
    "Venus": {"v∆∞·ª£ng": "Taurus", "t∆∞·ªõng": "Pisces", "t√π": "Virgo", "t·ª≠": "Scorpio"},
    "Saturn": {"v∆∞·ª£ng": "Capricorn", "t∆∞·ªõng": "Libra", "t√π": "Aries", "t·ª≠": "Cancer"},
}

dasha_sequence = ["Ketu", "Venus", "Sun", "Moon", "Mars", "Rahu", "Jupiter", "Saturn", "Mercury"]
dasha_years = {"Ketu": 7, "Venus": 20, "Sun": 6, "Moon": 10, "Mars": 7, "Rahu": 18, "Jupiter": 16, "Saturn": 19, "Mercury": 17}


# ==== H√†m ph·ª• ====
def get_rashi(degree):
    return rashis[int(degree // 30)]


def get_nakshatra(degree):
    return nakshatras[int(degree // (360 / 27))]


def get_pada(degree):
    deg_in_nak = degree % (360 / 27)
    return int(deg_in_nak // (13.3333 / 4)) + 1


def compute_ketu(rahu_deg):
    return (rahu_deg + 180.0) % 360.0
def is_retrograde(code):
    res, ret = swe.calc_ut(jd, code)
    return ret < 0
def deg_to_dms(degree):
    d = int(degree)
    m = int((degree - d) * 60)
    s = int(((degree - d) * 60 - m) * 60)
    return f"{d}¬∞{m:02d}'{s:02d}\""


def get_house_for_planet(lon, house_cusps):
    for i in range(12):
        start = house_cusps[i]
        end = house_cusps[i + 1]
        if end < start: end += 360
        lon_mod = lon if lon >= start else lon + 360
        if start <= lon_mod < end:
            return i + 1
    return None





now_local = datetime.now()
now_utc = now_local - timedelta(hours=timezone)
jd = swe.julday(now_utc.year, now_utc.month, now_utc.day,
                now_utc.hour + now_utc.minute / 60 + now_utc.second / 3600)

st.markdown(f"**üïí Gi·ªù hi·ªán t·∫°i (VN)**: {now_utc.strftime('%Y-%m-%d %H:%M:%S')}")


houses, _ = swe.houses_ex(jd, latitude, longitude, b'W', swe.FLG_SIDEREAL)
asc = houses[0]
asc_rashi = get_rashi(asc)
asc_pada = get_pada(asc)
asc_nak = get_nakshatra(asc)
asc_degree_dms = deg_to_dms(asc % 30)
equal_house_cusps = [(asc + i * 30) % 360 for i in range(12)] + [(asc + 360) % 360]



# H√†nh tinh
st.subheader("ü™ê V·ªã tr√≠ H√†nh Tinh")
st.subheader("üåÖ Ascendant (Lagna)")
st.write(f"`{asc}` ‚Üí {asc_rashi} | üåô Nakshatra: {asc_nak} ")
planet_data = []
sun_deg = swe.calc(jd, swe.SUN, swe.FLG_SIDEREAL)

for name, code in planets.items():
    lon_deg = swe.calc(jd, code, swe.FLG_SIDEREAL)[0][0]
    rashi = get_rashi(lon_deg)
    nak = get_nakshatra(lon_deg)
    pada = get_pada(lon_deg)
    sign_deg = deg_to_dms(lon_deg % 30)
    dignity = dignities.get(name, {}).get("v∆∞·ª£ng", "")
    bhava = get_house_for_planet(lon_deg, equal_house_cusps)
    planet_data.append({
        "H√†nh tinh": name,
        "V·ªã tr√≠": sign_deg,
        "Cung": rashi,
        "Nakshatra": nak,
        "Pada": pada,
        "Nh√†": bhava,
        "Dignity": dignity,
        "Ngh·ªãch h√†nh": "R" if is_retrograde(code) else "",
        
    })

ketu_deg = compute_ketu(swe.calc(jd, swe.MEAN_NODE)[0][0])
planet_data.append({
    "H√†nh tinh": "Ketu",
    "V·ªã tr√≠": deg_to_dms(ketu_deg % 30),
    "Cung": get_rashi(ketu_deg),
    "Nakshatra": get_nakshatra(ketu_deg),
    "Pada": get_pada(ketu_deg),
    "Nh√†": get_house_for_planet(ketu_deg, equal_house_cusps),
    "Dignity": "",
    "Ngh·ªãch h√†nh": "",
    
})

df_planets = pd.DataFrame(planet_data)
st.dataframe(df_planets, use_container_width=True)

# Dasha
st.subheader("üï∞Ô∏è Vimshottari Dasha (120 nƒÉm)")

moon_long = swe.calc(jd, swe.MOON, swe.FLG_SIDEREAL)[0][0]
nak_index = int(moon_long // (360 / 27))
first_dasha = dasha_sequence[nak_index % 9]
deg_in_nak = moon_long % (360 / 27)
balance_years = dasha_years[first_dasha] * (13.3333 - deg_in_nak) / 13.3333

start_date = now_local
rows = []
total_years = 0
index = 0
years_list = [balance_years] + [dasha_years[p] for p in dasha_sequence[1:]]
ordered_dasha = dasha_sequence[nak_index % 9:] + dasha_sequence[:nak_index % 9]

while total_years < 120:
    dasha = ordered_dasha[index % 9]
    years = years_list[index] if index < len(years_list) else dasha_years[dasha]
    if total_years + years > 120: years = 120 - total_years
    end_date = start_date + timedelta(days=years * 365.25)
    rows.append({
        "Dasha Lord": dasha,
        "Years": round(years, 2),
        "Start": start_date.strftime('%Y-%m-%d'),
        "End": end_date.strftime('%Y-%m-%d')
    })
    start_date = end_date
    total_years += years
    index += 1

st.dataframe(pd.DataFrame(rows), use_container_width=True)


st.caption("üìç Ph√°t tri·ªÉn t·ª´ t√°c gi·∫£ Nguy·ªÖn Duy Tu·∫•n ‚Äì v·ªõi m·ª•c ƒë√≠ch ph·ª•ng s·ª± t√¢m linh v√† c·ªông ƒë·ªìng.")

