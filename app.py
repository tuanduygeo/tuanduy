import streamlit as st
import os
import pandas as pd
import streamlit.components.v1 as components
import math
from datetime import date, timedelta, datetime
import swisseph as swe
import pytz
import matplotlib.pyplot as plt
import random
import numpy as np
import requests
import os
import rasterio
from rasterio.windows import from_bounds
from rasterio.enums import Resampling
from pyproj import Transformer
import contextily as ctx
from astrology_utils import astrology_block

def main():
    
    st.set_page_config(layout="wide")
    st.markdown("### 1. Chi√™m tinh ·∫§n ƒê·ªô")
    astrology_block()
    st.markdown("""
    ### 2.PHONG TH·ª¶Y ƒê·ªäA L√ù ‚Äì B·∫¢N ƒê·ªí ƒê·ªäA M·∫†CH
    """)
    
    # Kh·ªüi t·∫°o session state
    if "selected_idx" not in st.session_state:
        st.session_state.selected_idx = None
    # Th∆∞ m·ª•c ch·ª©a HTML
    html_dir = "dulieu"
    html_files = sorted([f for f in os.listdir(html_dir) if f.endswith(".html")])
    df = pd.DataFrame({"T√™n c√¥ng tr√¨nh": html_files})
    # Ph√¢n trang
    per_page = 5
    total_pages = math.ceil(len(df) / per_page)
    page = st.number_input(f"üìÑ Trang (1‚Äì{total_pages}):", min_value=1, max_value=total_pages, value=1, step=1)
    
    start_idx = (page - 1) * per_page
    end_idx = start_idx + per_page
    df_page = df.iloc[start_idx:end_idx]
    # Hi·ªÉn th·ªã danh s√°ch t·ª´ng trang
    for i, (_, row) in enumerate(df_page.iterrows()):
        idx = start_idx + i
        col1, col2 = st.columns([5, 1])
        with col1:
            st.markdown(f"üî∏ **{row['T√™n c√¥ng tr√¨nh']}**")
        with col2:
            if st.button("Xem", key=row['T√™n c√¥ng tr√¨nh']):
                st.session_state.selected_idx = idx
    
    
    
    
    # Hi·ªÉn th·ªã b·∫£n ƒë·ªì
    if "selected_idx" not in st.session_state:
        st.session_state.selected_idx = None
    
    # N·∫øu c√≥ danh s√°ch HTML
    if html_files:
        df = pd.DataFrame({"T√™n c√¥ng tr√¨nh": html_files})
    
        # N·∫øu ch∆∞a ch·ªçn g√¨ ‚Üí hi·ªÉn th·ªã m·∫∑c ƒë·ªãnh b·∫£n ƒë·ªì ƒë·∫ßu ti√™n
        if st.session_state.selected_idx is None:
            default_html = html_files[0]
            html_path = os.path.join(html_dir, default_html)
            st.subheader(f"üìç B·∫£n ƒë·ªì m·∫∑c ƒë·ªãnh: {default_html}")
            with open(html_path, 'r', encoding='utf-8') as f:
                html_content = f.read()
                components.html(html_content, height=900, scrolling=True)
    
        # N·∫øu ƒë√£ ch·ªçn ‚Üí hi·ªÉn th·ªã b·∫£n ƒë·ªì c√≥ n√∫t ti·∫øn l√πi
        else:
            selected_html = df.iloc[st.session_state.selected_idx]['T√™n c√¥ng tr√¨nh']
    
            col1, _, col3 = st.columns([1, 6, 1])
            with col1:
                if st.button("‚¨ÖÔ∏è L√πi") and st.session_state.selected_idx > 0:
                    st.session_state.selected_idx -= 1
                    st.rerun()
            with col3:
                if st.button("Ti·∫øn ‚û°Ô∏è") and st.session_state.selected_idx < len(df) - 1:
                    st.session_state.selected_idx += 1
                    st.rerun()
    
            st.markdown("---")
            st.subheader(f"üó∫Ô∏è B·∫£n ƒë·ªì: {selected_html}")
            html_path = os.path.join(html_dir, selected_html)
            with open(html_path, 'r', encoding='utf-8') as f:
                html_content = f.read()
                components.html(html_content, height=900, scrolling=True)
    else:
        st.warning("Kh√¥ng t√¨m th·∫•y file HTML n√†o trong th∆∞ m·ª•c 'dulieu/'")
    
    st.markdown("""
    ### üìå H∆∞·ªõng d·∫´n
    - Danh s√°ch 200 c√¥ng tr√¨nh ƒë∆∞·ª£c th∆∞·ªùng xuy√™n thay ƒë·ªïi/ 4900 c√¥ng tr√¨nh t√¢m linh ƒë∆∞·ª£c t√°c gi·∫£ thu th·∫≠p t·∫°i Vi·ªát Nam.
    - C√¥ng ngh·ªá: ·ª®ng d·ª•ng c√¥ng ngh·ªá t·ª± ƒë·ªông h√≥a ƒë·ªãa kh√¥ng gian ƒë·ªÉ x√°c ƒë·ªãnh vector c√°c h∆∞·ªõng ƒë·ªãa m·∫°ch t·ª± ƒë·ªông t·∫°i c√°c c√¥ng tr√¨nh.
    - Phi√™n b·∫£n: V1.0 phi√™n b·∫£n web ∆∞u ti√™n s·ªë li·ªáu nh·∫π, vector h∆∞·ªõng m·∫°ch mang t√≠nh tham kh·∫£o- kh√¥ng ch√≠nh x√°c tuy·ªát ƒë·ªëi.
    - C√°ch d√πng: C√°c b·∫°n ch·ªçn trang ‚Üí B·∫•m `Xem` ‚Üí B·∫£n ƒë·ªì s·∫Ω hi·ªÉn th·ªã b√™n d∆∞·ªõi.
    """)
      
    
    st.markdown("""
    ### 3.üåêBi·ªÉu ƒë·ªì c·ªông h∆∞·ªüng Schumann Tr√°i ƒê·∫•t tr·ª±c tuy·∫øn
    Ngu·ªìn: [Tomsk, Russia Space Observing System]
    """)
    st.image("https://sosrff.tsu.ru/new/shm.jpg", caption="Schumann Resonance - Live", use_container_width=True)
    
    st.markdown("""
    ### 4.üß≤ D·ªØ li·ªáu ƒë·ªãa t·ª´ tr·ª±c tuy·∫øn""")
    start_date = (datetime.today() - timedelta(days=15)).strftime('%Y-%m-%d')
    end_date = datetime.today().strftime('%Y-%m-%d')
    iframe_url = f"https://imag-data.bgs.ac.uk/GIN_V1/GINForms2?" \
                 f"observatoryIagaCode=PHU&publicationState=Best+available" \
                 f"&dataStartDate={start_date}&dataDuration=30" \
                 f"&samplesPerDay=minute&submitValue=View+%2F+Download&request=DataView"
    # Hi·ªÉn th·ªã trong Streamlit
    st.components.v1.iframe(iframe_url, height=1000,scrolling=True)
    
    st.markdown("""
    ###  Ch·ªâ s·ªë Kp ‚Äì C·∫£nh b√°o B√£o T·ª´
    """)
    
    kp_url = "https://services.swpc.noaa.gov/json/planetary_k_index_1m.json"
    
    def interpret_kp(kp):
        if kp <= 2:
            return "üü¢ R·∫•t an to√†n"
        elif kp == 3:
            return "üü¢ An to√†n"
        elif kp == 4:
            return "üü° Trung b√¨nh ‚Äì ch√∫ √Ω nh·∫π"
        elif kp == 5:
            return "üü† C·∫£nh b√°o nh·∫π ‚Äì B√£o t·ª´ c·∫•p G1"
        elif kp == 6:
            return "üî¥ C·∫£nh b√°o ‚Äì B√£o t·ª´ c·∫•p G2"
        elif kp == 7:
            return "üî¥ Nguy hi·ªÉm ‚Äì B√£o t·ª´ c·∫•p G3"
        elif kp == 8:
            return "üî¥ R·∫•t nguy hi·ªÉm ‚Äì G4"
        else:
            return "üö® C·ª±c k·ª≥ nguy hi·ªÉm ‚Äì G5"
    
    try:
        kp_data = requests.get(kp_url).json()
        df_kp = pd.DataFrame(kp_data)
    
        if 'kp_index' in df_kp.columns and not df_kp.empty:
            df_kp['time_tag'] = pd.to_datetime(df_kp['time_tag'])
            df_kp.set_index('time_tag', inplace=True)
    
            latest_kp = df_kp['kp_index'].iloc[-1]
            st.metric("üåê Kp Index (hi·ªán t·∫°i)", f"{latest_kp}", delta=interpret_kp(latest_kp))
    
            # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì 3 ng√†y g·∫ßn nh·∫•t
            df_kp['date'] = df_kp.index.date
            last_3_days = sorted(df_kp['date'].unique())[-3:]
            df_plot = df_kp[df_kp['date'].isin(last_3_days)]
            st.line_chart(df_plot['kp_index'])
    
        else:
            st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·ªôt 'kp_index' trong d·ªØ li·ªáu.")
    except Exception as e:
        st.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu Kp Index.")
        st.text(str(e))
    
    # 1. t√≠nh ========================
    input_str = st.text_input("x:", value="")

    # X·ª≠ l√Ω t√°ch chu·ªói th√†nh 2 s·ªë th·ª±c
    x, y = None, None
    if input_str:
        try:
            parts = [s.strip() for s in input_str.split(",")]
            if len(parts) == 2:
                x = float(parts[0])
                y = float(parts[1])
        except Exception:
            st.warning("‚ö†Ô∏è C·∫ßn nhh·∫≠p ƒë·ªãnh d·∫°ng chu·∫©n")
    
    if x is not None and y is not None:
        st.success(f"B·∫°n ƒë√£ nh·∫≠p: vƒ© ƒë·ªô={x}, kinh ƒë·ªô={y}")
    dt = st.number_input("t", min_value=0.001, max_value=0.5, value=0.005, step=0.001, format="%.3f")
    dx=dy=dt
    radius=dt*111320
    # ========================
    # 2. N√öT T√çNH & KI·ªÇM TRA FILE
    # ========================
    if st.button("run"):
        if x is None or y is None:
            st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng.")
        else:
            try:
                
                west, east = y - dx, y + dx
                south, north = x - dy, x + dy
    
                lat_tile = int(north)
                lon_tile = int(east)
                tile = f"{'N' if lat_tile >= 0 else 'S'}{abs(lat_tile):02d}{'E' if lon_tile >= 0 else 'W'}{abs(lon_tile):03d}"
    
                srtm_dir = "dulieu"
                hgt_path = os.path.join(srtm_dir, f"{tile}.hgt")
                out_path = os.path.join(srtm_dir, "vietnamcrop.tif")
    
                if not os.path.exists(hgt_path):
                    st.error(f"‚ùå Kh√¥ng t√¨m th·∫•y file: `{hgt_path}`.")
                else:
                    # ========================
                    # 3. X·ª¨ L√ù DEM & GHI FILE M·ªöI
                    # ========================
                    with rasterio.open(hgt_path) as src:
                        window = from_bounds(west, south, east, north, src.transform)
                        dem_crop = src.read(1, window=window, resampling=Resampling.bilinear)
                        transform = src.window_transform(window)
                        profile = src.profile
    
                    profile.update({
                        "driver": "GTiff",
                        "height": dem_crop.shape[0],
                        "width": dem_crop.shape[1],
                        "transform": transform,
                        "nodata": -9999
                    })
    
                    with rasterio.open(out_path, "w", **profile) as dst:
                        dst.write(dem_crop, 1)
    
                    st.success("‚úÖ ƒê√£ c·∫Øt file th√†nh c√¥ng.")
                    
    
                    # ========================
                    # 4. CHUY·ªÇN H·ªÜ T·ªåA ƒê·ªò EPSG:3857
                    # ========================
                    with rasterio.open(out_path) as data:
                        data_array = data.read(1).astype(np.float64)
                        transform = data.transform
    
                    nrows, ncols = data_array.shape
                    xt = np.arange(ncols) * transform.a + transform.c + transform.a / 2
                    yt = np.arange(nrows) * transform.e + transform.f + transform.e / 2
                    Xx, Yx = np.meshgrid(xt, yt)
    
                    transformer = Transformer.from_crs("EPSG:4326", "EPSG:3857", always_xy=True)
                    Xx3857, Yx3857 = transformer.transform(Xx, Yx)
    
                    st.success("üìê Chuy·ªÉn ƒë·ªïi s·ªë li·ªáu th√†nh c√¥ng.")
                    
    
            except Exception as e:
                st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")
        # 3. H√ÄM V·∫º V√íNG FIBONACCI
        # ========================
    
        def plot_fibonacci_labels_only(ax, x_center, y_center, labels_inner, radius=radius):
            n = len(labels_inner)
            theta = np.linspace(0, 2*np.pi, n, endpoint=False) + np.pi/2
            shift = np.deg2rad(7.5)
        
            # ƒê∆∞·ªùng chia
            bold_indices = {1, 4, 7, 10, 13, 16, 19, 22}
            for i, t in enumerate(theta):
                lw = 2 if i in bold_indices else 1
                x0 = x_center + np.cos(t + shift) * radius * 0.85
                y0 = y_center + np.sin(t + shift) * radius * 0.85
                x1 = x_center + np.cos(t + shift) * radius * 0.95
                y1 = y_center + np.sin(t + shift) * radius * 0.95
                ax.plot([x0, x1], [y0, y1], color='white', linewidth=lw)
        
            # V√≤ng tr√≤n
            for r in [ 0.95, 0.85]:
                circle_theta = np.linspace(0, 2*np.pi, 1000)
                x = x_center + np.cos(-circle_theta) * r * radius
                y = y_center + np.sin(-circle_theta) * r * radius
                ax.plot(x, y, color='white', linewidth=1)
        
            # Nh√£n ch·ªØ
            for t, label in zip(theta, labels_inner):
                x = x_center + np.cos(t) * radius * 0.9
                y = y_center + np.sin(t) * radius * 0.9
                ax.text(x, y, label, ha='center', va='center', fontsize=13, color='white',fontweight='bold')
            ax.text(x_center, y_center, '+', ha='center', va='center', fontsize=22,color='white', fontweight='bold')
        labels_24 = [
            'T√Ω', 'Nh√¢m', 'H·ª£i', 'C√†n', 'Tu·∫•t', 'T√¢n', 'D·∫≠u', 'Canh',
            'Th√¢n', 'Kh√¥n', 'M√πi', 'ƒêinh', 'Ng·ªç', 'B√≠nh', 'T·ªµ', 'T·ªën',
            'Th√¨n', '·∫§t', 'M√£o', 'Gi√°p', 'D·∫ßn', 'C·∫•n', 'S·ª≠u', 'Qu√Ω'
        ]
        # 4. V·∫º TO√ÄN B·ªò
        # ========================
        fig, ax = plt.subplots(figsize=(12, 12))  # üëâ TƒÉng k√≠ch th∆∞·ªõc h√¨nh v·∫Ω
        
        # T√¢m ·∫£nh v√† g√≥c zoom
        x_center, y_center = transformer.transform(y, x)
        x0, x1 = Xx3857.min(), Xx3857.max()
        y0, y1 = Yx3857.min(), Yx3857.max()
        
        img, ext = ctx.bounds2img(x0, y0, x1, y1, ll=False, source=ctx.providers.Esri.WorldImagery, zoom=18)
        ax.imshow(img, extent=ext, origin="upper")
        
        # Kh·ªõp l·∫°i gi·ªõi h·∫°n hi·ªÉn th·ªã
        ax.set_xlim(x0, x1)
        ax.set_ylim(y0, y1)
        
        # V·∫Ω contour
        levels = np.linspace(data_array.min(), data_array.max(), 21)
        cf = ax.contourf(Xx3857, Yx3857, data_array, cmap="rainbow", levels=levels, alpha=0)
        contour_lines = ax.contour(Xx3857, Yx3857, data_array, levels=levels, cmap='rainbow', linewidths=1)
        threshold = np.percentile(data_array, 90)
        threshold1 = np.percentile(data_array, 2)
        for level in levels:
        if level >= threshold:
            ax.contour(Xx3857, Yx3857, data_array, levels=[level], cmap='rainbow', linewidths=2.5)
        if level <= threshold1:
            ax.contour(Xx3857, Yx3857, data_array, levels=[level], cmap='rainbow', linewidths=2.5)
        # V·∫Ω v√≤ng Fibonacci
        plot_fibonacci_labels_only(ax, x_center, y_center, labels_24, radius=radius)
      
        # Slider g√≥c
        #col1, col2 = st.columns([1, 3])  # col1 h·∫πp h∆°n
        
       # with col1:
       #     angle_deg = st.slider("üéØ G√≥c", 0, 359, 0)
        
        
        # Chuy·ªÉn sang radian: 0¬∞ ·ªü B·∫Øc, tƒÉng thu·∫≠n chi·ªÅu kim ƒë·ªìng h·ªì
       # angle_rad = np.deg2rad(-angle_deg + 90)
        
        # ====== V·∫º M≈®I T√äN ======
       # arrow_length = 500  # üëà b·∫±ng v·ªõi b√°n k√≠nh v√≤ng
       # x_end = x_center + arrow_length * np.cos(angle_rad)
       # y_end = y_center + arrow_length * np.sin(angle_rad)
        
        # V·∫Ω tr√™n matplotlib ho·∫∑c streamlit.pyplot
        # ax.arrow(x_center, y_center, x_end - x_center, y_end - y_center, head_width=10, head_length=15, fc='black', ec='black')
        
        # T·∫Øt tr·ª•c v√† l∆∞u ·∫£nh
        ax.set_axis_off()
        plt.tight_layout()
        
        st.pyplot(fig)
        plt.close(fig)
    
    st.markdown("""
    ### 5.M√î H√åNH L·∫†C TH∆Ø 3X3 V√Ä B·∫¨C CAO V√î T·∫¨N
    """)
    
    # Nh·∫≠p b·∫≠c c·ªßa ma ph∆∞∆°ng
    n = st.number_input("Nh·∫≠p b·∫≠c l·∫ª n (>=3):", min_value=3, step=2, value=9)
    
    def generate_magic_square_southeast(n):
        if n % 2 == 0:
            raise ValueError("Ch·ªâ h·ªó tr·ª£ ma ph∆∞∆°ng b·∫≠c l·∫ª.")
        square = np.zeros((n, n), dtype=int)
        # B·∫Øt ƒë·∫ßu t·ª´ v·ªã tr√≠ g·∫ßn t√¢m: (t√¢m h√†ng + 1, t√¢m c·ªôt)
        i, j = n // 2 + 1, n // 2
    
        for num in range(1, n * n + 1):
            square[i % n, j % n] = num
            
            # V·ªã tr√≠ k·∫ø ti·∫øp theo h∆∞·ªõng ƒê√¥ng Nam
            new_i, new_j = (i + 1) % n, (j + 1) % n
    
            if square[new_i, new_j] != 0:
                # N·∫øu b·ªã tr√πng, th√¨ nh·∫£y xu·ªëng th√™m 1 h√†ng
                i = (i + 2) % n
            else:
                i, j = new_i, new_j
    
        return square
    # X√°c ƒë·ªãnh h√†ng v√† c·ªôt trung t√¢m
    center_index = n // 2
    
    # H√†m t√¥ m√†u c√°c √¥ thu·ªôc h√†ng/c·ªôt trung t√¢m
    def highlight_center(row_or_col, axis='row'):
        return ['background-color: orange' if (i == center_index if axis == 'row' else row_or_col.name == center_index) else '' for i in range(len(row_or_col))]
    
    # --- MAIN ---
    try:
        square = generate_magic_square_southeast(n)
        df = pd.DataFrame(square)
        st.dataframe(df, use_container_width=False)
    
        # --- Ki·ªÉm tra t·ªïng ---
        
        row_sums = df.sum(axis=1)
        col_sums = df.sum(axis=0)
        diag1 = np.trace(square)
        diag2 = np.trace(np.fliplr(square))
        magic_const = n * (n ** 2 + 1) // 2
    
        st.markdown(f"- T·ªïng chu·∫©n (magic constant): **{magic_const}**")
        st.markdown(f"- T·ªïng h√†ng: **{row_sums.iloc[0]}**")
        st.markdown(f"- T·ªïng c·ªôt: **{col_sums.iloc[0]}**")
        st.markdown(f"- T·ªïng ƒë∆∞·ªùng ch√©o ch√≠nh: {diag1}")
        st.markdown(f"- T·ªïng ƒë∆∞·ªùng ch√©o ph·ª•: {diag2}")
    
        if (
            all(row_sums == magic_const)
            and all(col_sums == magic_const)
            and diag1 == magic_const
            and diag2 == magic_const
        ):
            st.success("Ma ph∆∞∆°ng h·ª£p l·ªá!")
        else:
            st.warning("‚ö†Ô∏è Ma ph∆∞∆°ng n√†y KH√îNG h·ª£p l·ªá.")
    
        
        # --- B·∫¢NG MODULO 9 ---
        st.markdown("#### B·∫£ng ma ph∆∞∆°ng chia h·∫øt cho 9:")  
        df_mod9 = (df % 9).replace(0, 9)
        st.dataframe(df_mod9, use_container_width=False)
       
        tong_cot_dau = df_mod9.iloc[:, 0].sum()
        st.markdown(f"üßæ T·ªïng m·ªói c·ªôt: **{tong_cot_dau}**")
    
    except Exception as e:
        st.error(f"L·ªói: {e}")
    
    st.markdown("---\n### T√°c gi·∫£ Nguy·ªÖn Duy Tu·∫•n ‚Äì v·ªõi m·ª•c ƒë√≠ch ph·ª•ng s·ª± t√¢m linh v√† c·ªông ƒë·ªìng. SƒêT&ZALO: 0377442597. DONATE: nguyenduytuan techcombank 19033167089018")

if __name__ == "__main__":
    main()
