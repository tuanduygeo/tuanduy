import streamlit as st
import os
import pandas as pd
import streamlit.components.v1 as components
import math
from datetime import date, timedelta, datetime
import swisseph as swe
import pytz
import matplotlib.pyplot as plt



st.set_page_config(layout="wide")
st.title("üß≠ PHONG TH·ª¶Y ƒê·ªäA L√ù ‚Äì B·∫¢N ƒê·ªí ƒê·ªäA M·∫†CH")

st.markdown("""
### üìå H∆∞·ªõng d·∫´n
- Danh s√°ch 200 c√¥ng tr√¨nh ƒë∆∞·ª£c th∆∞·ªùng xuy√™n thay ƒë·ªïi/ 4900 c√¥ng tr√¨nh t√¢m linh ƒë∆∞·ª£c t√°c gi·∫£ thu th·∫≠p t·∫°i Vi·ªát Nam.
- C√¥ng ngh·ªá: ·ª®ng d·ª•ng c√¥ng ngh·ªá t·ª± ƒë·ªông h√≥a ƒë·ªãa kh√¥ng gian ƒë·ªÉ x√°c ƒë·ªãnh vector c√°c h∆∞·ªõng ƒë·ªãa m·∫°ch t·ª± ƒë·ªông t·∫°i c√°c c√¥ng tr√¨nh.
- Phi√™n b·∫£n: V1.0 phi√™n b·∫£n web ∆∞u ti√™n s·ªë li·ªáu nh·∫π, vector h∆∞·ªõng m·∫°ch mang t√≠nh tham kh·∫£o- kh√¥ng ch√≠nh x√°c tuy·ªát ƒë·ªëi.
- C√°ch d√πng: C√°c b·∫°n ch·ªçn trang ‚Üí B·∫•m `Xem` ‚Üí B·∫£n ƒë·ªì s·∫Ω hi·ªÉn th·ªã b√™n d∆∞·ªõi.
""")

# Kh·ªüi t·∫°o session state
if "selected_idx" not in st.session_state:
    st.session_state.selected_idx = None

# Th∆∞ m·ª•c ch·ª©a HTML
html_dir = "dulieu"
html_files = sorted([f for f in os.listdir(html_dir) if f.endswith(".html")])
df = pd.DataFrame({"T√™n c√¥ng tr√¨nh": html_files})

# T√¨m ki·∫øm
search = st.text_input("üîç T√¨m c√¥ng tr√¨nh:", "").lower()
if search:
    df = df[df["T√™n c√¥ng tr√¨nh"].str.lower().str.contains(search)]
    st.session_state.selected_idx = None  # reset khi t√¨m

# Ph√¢n trang
per_page = 10
total_pages = math.ceil(len(df) / per_page)
page = st.number_input(f"üìÑ Trang (1‚Äì{total_pages}):", min_value=1, max_value=total_pages, value=1, step=1)

start_idx = (page - 1) * per_page
end_idx = start_idx + per_page
df_page = df.iloc[start_idx:end_idx]

# Hi·ªÉn th·ªã danh s√°ch t·ª´ng trang
for i, (_, row) in enumerate(df_page.iterrows()):
    idx = start_idx + i
    col1, col2 = st.columns([5, 1])
    with col1:
        st.markdown(f"üî∏ **{row['T√™n c√¥ng tr√¨nh']}**")
    with col2:
        if st.button("Xem", key=row['T√™n c√¥ng tr√¨nh']):
            st.session_state.selected_idx = idx

# Hi·ªÉn th·ªã b·∫£n ƒë·ªì
if "selected_idx" not in st.session_state:
    st.session_state.selected_idx = None

# N·∫øu c√≥ danh s√°ch HTML
if html_files:
    df = pd.DataFrame({"T√™n c√¥ng tr√¨nh": html_files})

    # N·∫øu ch∆∞a ch·ªçn g√¨ ‚Üí hi·ªÉn th·ªã m·∫∑c ƒë·ªãnh b·∫£n ƒë·ªì ƒë·∫ßu ti√™n
    if st.session_state.selected_idx is None:
        default_html = html_files[0]
        html_path = os.path.join(html_dir, default_html)
        st.subheader(f"üìç B·∫£n ƒë·ªì m·∫∑c ƒë·ªãnh: {default_html}")
        with open(html_path, 'r', encoding='utf-8') as f:
            html_content = f.read()
            components.html(html_content, height=800, scrolling=True)

    # N·∫øu ƒë√£ ch·ªçn ‚Üí hi·ªÉn th·ªã b·∫£n ƒë·ªì c√≥ n√∫t ti·∫øn l√πi
    else:
        selected_html = df.iloc[st.session_state.selected_idx]['T√™n c√¥ng tr√¨nh']

        col1, _, col3 = st.columns([1, 6, 1])
        with col1:
            if st.button("‚¨ÖÔ∏è L√πi") and st.session_state.selected_idx > 0:
                st.session_state.selected_idx -= 1
                st.rerun()
        with col3:
            if st.button("Ti·∫øn ‚û°Ô∏è") and st.session_state.selected_idx < len(df) - 1:
                st.session_state.selected_idx += 1
                st.rerun()

        st.markdown("---")
        st.subheader(f"üó∫Ô∏è B·∫£n ƒë·ªì: {selected_html}")
        html_path = os.path.join(html_dir, selected_html)
        with open(html_path, 'r', encoding='utf-8') as f:
            html_content = f.read()
            components.html(html_content, height=800, scrolling=True)
else:
    st.warning("Kh√¥ng t√¨m th·∫•y file HTML n√†o trong th∆∞ m·ª•c 'dulieu/'")

# --- SCHUMANN RESONANCE ---
st.markdown("""
### 2.üåêBi·ªÉu ƒë·ªì c·ªông h∆∞·ªüng Schumann Tr√°i ƒê·∫•t tr·ª±c tuy·∫øn
Ngu·ªìn: [Tomsk, Russia ‚Äì Space Observing System]
""")
st.image("https://sosrff.tsu.ru/new/shm.jpg", caption="Schumann Resonance - Live", use_container_width=True)
# --- ƒê·ªäA T·ª™ TR·∫†M PH√ö TH·ªå (INTERMAGNET) ---
st.markdown("""
### 3.üß≤ D·ªØ li·ªáu ƒë·ªãa t·ª´ tr·ª±c tuy·∫øn""")
start_date = (datetime.today() - timedelta(days=30)).strftime('%Y-%m-%d')
end_date = datetime.today().strftime('%Y-%m-%d')
iframe_url = f"https://imag-data.bgs.ac.uk/GIN_V1/GINForms2?observatoryIagaCode=PHU&publicationState=Best+available&dataStartDate={start_date}&dataDuration=30&samplesPerDay=minute&submitValue=View+%2F+Download&request=DataView"
st.components.v1.iframe(iframe_url, height=1200,scrolling=True)
st.markdown("""
### 4.Chi√™m tinh ·∫§n ƒê·ªô""")

# ==== Setup ====
swe.set_ephe_path("ephe")
swe.set_sid_mode(swe.SIDM_LAHIRI)
vn_tz = pytz.timezone("Asia/Ho_Chi_Minh")
# L·∫•y gi·ªù hi·ªán t·∫°i ·ªü m√∫i gi·ªù Vi·ªát Nam
now_local = datetime.now(vn_tz)

# Chuy·ªÉn ƒë·ªïi gi·ªù hi·ªán t·∫°i v·ªÅ UTC
now_utc = now_local.astimezone(pytz.utc)

jd = swe.julday(now_utc.year, now_utc.month, now_utc.day,
                now_utc.hour + now_utc.minute / 60 + now_utc.second / 3600)

st.markdown(f"**üïí Gi·ªù hi·ªán t·∫°i (VN)**: {now_local.strftime('%Y-%m-%d %H:%M:%S')}")

# Create sliders for user input for time and coordinates
col1, col2 = st.columns([1, 1])

with col1:
    year = st.slider("Ch·ªçn NƒÉm", min_value=1900, max_value=2100, value=2025, step=1)
    month = st.slider("Ch·ªçn Th√°ng", min_value=1, max_value=12, value=5, step=1)
    day = st.slider("Ch·ªçn Ng√†y", min_value=1, max_value=31, value=11, step=1)

with col2:
    hour = st.slider("Ch·ªçn Gi·ªù", min_value=0, max_value=23, value=13, step=1)
    minute = st.slider("Ch·ªçn Ph√∫t", min_value=0, max_value=59, value=26, step=1)

col3, col4 = st.columns([1, 1])

with col3:
    latitude = st.slider("Ch·ªçn Vƒ© ƒë·ªô", min_value=-90.0, max_value=90.0, value=21.0, step=0.1)
    longitude = st.slider("Ch·ªçn Kinh ƒë·ªô", min_value=-180.0, max_value=180.0, value=105.8, step=0.1)

with col4:
    timezone = st.slider("Ch·ªçn M√∫i gi·ªù", min_value=-12, max_value=12, value=7, step=1)

# Button to calculate
if st.button("Ch·∫°y T√≠nh To√°n"):
    selected_datetime = datetime(year, month, day, hour, minute)

    if selected_datetime.tzinfo is None:
        selected_datetime_vn = vn_tz.localize(selected_datetime)
    else:
        selected_datetime_vn = selected_datetime.astimezone(vn_tz)

    selected_utc = selected_datetime_vn.astimezone(pytz.utc)  # Convert to UTC

    jd = swe.julday(selected_utc.year, selected_utc.month, selected_utc.day,
                    selected_utc.hour + selected_utc.minute / 60 + selected_utc.second / 3600)

    st.markdown(f"**Vƒ© ƒë·ªô**: {latitude}¬∞ **Kinh ƒë·ªô**: {longitude}¬∞ **M√∫i gi·ªù**: GMT{timezone}")
    st.markdown(f"**NƒÉm**: {selected_utc.year} **Th√°ng**: {selected_utc.month} **Ng√†y**: {selected_utc.day}")


rashis = ["‚ôà Aries", "‚ôâ Taurus", "‚ôä Gemini", "‚ôã Cancer", "‚ôå Leo", "‚ôç Virgo", "‚ôé Libra", "‚ôè Scorpio",
          "‚ôê Sagittarius", "‚ôë Capricorn", "‚ôí Aquarius", "‚ôì Pisces"]

nakshatras = ["Ashwini", "Bharani", "Krittika", "Rohini", "Mrigashirsha", "Ardra", "Punarvasu", "Pushya", "Ashlesha",
              "Magha", "Purva Phalguni", "Uttara Phalguni", "Hasta", "Chitra", "Swati", "Vishakha", "Anuradha",
              "Jyeshtha", "Mula", "Purva Ashadha", "Uttara Ashadha", "Shravana", "Dhanishta", "Shatabhisha",
              "Purva Bhadrapada", "Uttara Bhadrapada", "Revati"]

planets = {
    'Sun': swe.SUN, 'Moon': swe.MOON, 'Mars': swe.MARS, 'Mercury': swe.MERCURY,
    'Jupiter': swe.JUPITER, 'Venus': swe.VENUS, 'Saturn': swe.SATURN, 'Rahu': swe.MEAN_NODE
}

dignities = {
    "Sun": {"v∆∞·ª£ng": "Leo", "t∆∞·ªõng": "Aries", "t√π": "Libra", "t·ª≠": "Aquarius"},
    "Moon": {"v∆∞·ª£ng": "Cancer", "t∆∞·ªõng": "Taurus", "t√π": "Scorpio", "t·ª≠": "Capricorn"},
    "Mars": {"v∆∞·ª£ng": "Aries", "t∆∞·ªõng": "Capricorn", "t√π": "Cancer", "t·ª≠": "Libra"},
    "Mercury": {"v∆∞·ª£ng": "Gemini", "t∆∞·ªõng": "Virgo", "t√π": "Pisces", "t·ª≠": "Sagittarius"},
    "Jupiter": {"v∆∞·ª£ng": "Sagittarius", "t∆∞·ªõng": "Cancer", "t√π": "Capricorn", "t·ª≠": "Gemini"},
    "Venus": {"v∆∞·ª£ng": "Taurus", "t∆∞·ªõng": "Pisces", "t√π": "Virgo", "t·ª≠": "Scorpio"},
    "Saturn": {"v∆∞·ª£ng": "Capricorn", "t∆∞·ªõng": "Libra", "t√π": "Aries", "t·ª≠": "Cancer"},
}

dasha_sequence = ["Ketu", "Venus", "Sun", "Moon", "Mars", "Rahu", "Jupiter", "Saturn", "Mercury"]
dasha_years = {"Ketu": 7, "Venus": 20, "Sun": 6, "Moon": 10, "Mars": 7, "Rahu": 18, "Jupiter": 16, "Saturn": 19, "Mercury": 17}


# ==== H√†m ph·ª• ====
def get_rashi(degree):
    return rashis[int(degree // 30)]

def get_dignity(planet, rashi):
    dign = dignities.get(planet, {})
    if rashi.split()[-1] == dign.get("v∆∞·ª£ng"):
        return "v∆∞·ª£ng"
    elif rashi.split()[-1] == dign.get("t∆∞·ªõng"):
        return "t∆∞·ªõng"
    elif rashi.split()[-1] == dign.get("t√π"):
        return "t√π"
    elif rashi.split()[-1] == dign.get("t·ª≠"):
        return "t·ª≠"
    return ""
def get_nakshatra(degree):
    return nakshatras[int(degree // (360 / 27))]


def get_pada(degree):
    deg_in_nak = degree % (360 / 27)
    return int(deg_in_nak // (13.3333 / 4)) + 1


def compute_ketu(rahu_deg):
    return (rahu_deg + 180.0) % 360.0

def deg_to_dms(degree):
    d = int(degree)
    m = int((degree - d) * 60)
    s = int(((degree - d) * 60 - m) * 60)
    return f"{d}¬∞{m:02d}'{s:02d}\""


def get_house_for_planet(lon, house_cusps):
    for i in range(12):
        start = house_cusps[i]
        end = house_cusps[i + 1]
        if end < start: end += 360
        lon_mod = lon if lon >= start else lon + 360
        if start <= lon_mod < end:
            return i + 1
    return None
def is_retrograde(code, jd_current, jd_previous):
    # T√≠nh to√°n v·ªã tr√≠ h√†nh tinh t·∫°i th·ªùi ƒëi·ªÉm hi·ªán t·∫°i
    res_current, _ = swe.calc_ut(jd_current, code)
    lon_deg_current = res_current[0]
    
    # T√≠nh to√°n v·ªã tr√≠ h√†nh tinh t·∫°i th·ªùi ƒëi·ªÉm tr∆∞·ªõc ƒë√≥
    res_previous, _ = swe.calc_ut(jd_previous, code)
    lon_deg_previous = res_previous[0]
    
    # Ki·ªÉm tra xem v·ªã tr√≠ c√≥ thay ƒë·ªïi h∆∞·ªõng kh√¥ng
    # N·∫øu s·ª± thay ƒë·ªïi gi·ªØa hai ng√†y c√≥ d·∫•u hi·ªáu quay ng∆∞·ª£c, h√†nh tinh ƒëang ngh·ªãch h√†nh
    if lon_deg_current < lon_deg_previous:
        return True
    return False




houses,ascmc = swe.houses_ex(jd, latitude, longitude, b'W', swe.FLG_SIDEREAL)
asc = houses[0]
ast=ascmc[0]
asc_rashi = get_rashi(ast)
asc_pada = get_pada(ast)
asc_nak = get_nakshatra(ast)
asc_degree_dms = deg_to_dms(ast % 30)
equal_house_cusps = [(asc + i * 30) % 360 for i in range(12)] + [(asc + 360) % 360]


# H√†nh tinh
st.subheader("ü™ê V·ªã tr√≠ H√†nh Tinh")

# T√≠nh to√°n c√°c h√†nh tinh
planet_data = []

# T√≠nh to√°n ng√†y tr∆∞·ªõc ƒë√≥ (1 ng√†y)
jd_previous = jd - 1  # Gi·∫£m 1 ng√†y ƒë·ªÉ l·∫•y ng√†y tr∆∞·ªõc ƒë√≥
sun_deg = swe.calc(jd, swe.SUN, swe.FLG_SIDEREAL)
planet_data.append({
    "H√†nh tinh": "Asc",
    "V·ªã tr√≠": asc_degree_dms,
    "Cung": asc_rashi,
    "Nakshatra": asc_nak,
    "Pada": asc_pada,
    "Nh√†": 1,
    "T√≠nh ch·∫•t": "",
    "Ngh·ªãch h√†nh": ""
})

for name, code in planets.items():
    # T√≠nh ƒë·ªô c·ªßa h√†nh tinh ·ªü hi·ªán t·∫°i v√† tr∆∞·ªõc ƒë√≥
    lon_deg = swe.calc(jd, code, swe.FLG_SIDEREAL)[0][0]
    
    # Ki·ªÉm tra ngh·ªãch h√†nh v·ªõi hai ng√†y
    retrograde_status = "R" if is_retrograde(code, jd, jd_previous) else ""

    # Th√™m th√¥ng tin h√†nh tinh v√†o danh s√°ch planet_data
    planet_data.append({
        "H√†nh tinh": name,
        "V·ªã tr√≠": deg_to_dms(lon_deg % 30),
        "Cung": get_rashi(lon_deg),
        "Nakshatra": get_nakshatra(lon_deg),
        "Pada": get_pada(lon_deg),
        "Nh√†": get_house_for_planet(lon_deg, equal_house_cusps),
        "T√≠nh ch·∫•t": get_dignity(name, get_rashi(lon_deg)),
        "Ngh·ªãch h√†nh": retrograde_status,
    })
# T√¨m Rahu trong planet_data
rahu_deg = None
for planet in planet_data:
    if planet["H√†nh tinh"] == "Rahu":
        rahu_deg = swe.calc(jd, swe.MEAN_NODE, swe.FLG_SIDEREAL)[0][0]
        break

# N·∫øu Rahu c√≥ gi√° tr·ªã, t√≠nh to√°n Ketu
if rahu_deg is not None:
    ketu_deg = (rahu_deg + 180) % 360  # Ketu l√† ƒë·ªëi di·ªán c·ªßa Rahu

    # T√≠nh to√°n c√°c th√¥ng s·ªë c·ªßa Ketu
    ketu_rashi = get_rashi(ketu_deg)
    ketu_nak = get_nakshatra(ketu_deg)
    ketu_pada = get_pada(ketu_deg)
    ketu_sign_deg = deg_to_dms(ketu_deg % 30)
    ketu_dignity = ""  # Ketu kh√¥ng c√≥ "t√≠nh ch·∫•t" (v∆∞·ª£ng, t∆∞·ªõng, t√π, t·ª≠)
    ketu_bhava = get_house_for_planet(ketu_deg, equal_house_cusps)

    # Th√™m Ketu v√†o planet_data
    planet_data.append({
        "H√†nh tinh": "Ketu",
        "V·ªã tr√≠": ketu_sign_deg,
        "Cung": ketu_rashi,
        "Nakshatra": ketu_nak,
        "Pada": ketu_pada,
        "Nh√†": ketu_bhava,
        "T√≠nh ch·∫•t": ketu_dignity,
        "Ngh·ªãch h√†nh": "",  # Ketu kh√¥ng c√≥ ngh·ªãch h√†nh
    })


# H√†m v·∫Ω bi·ªÉu ƒë·ªì
def draw_chart(planet_data):
    fig, ax = plt.subplots(figsize=(3, 3))
    ax.set_xlim(0, 100)
    ax.set_ylim(0, 100)
    ax.axis("off")

    # Khung ngo√†i
    ax.plot([0, 100, 100, 0, 0], [0, 0, 100, 100, 0], 'k', linewidth=2)

    # C√°c ƒë∆∞·ªùng ch√©o
    ax.plot([0, 100], [0, 100], 'k', linewidth=1)
    ax.plot([0, 100], [100, 0], 'k', linewidth=1)

    # ƒê∆∞·ªùng t·ª´ gi·ªØa c·∫°nh ƒë·∫øn trung t√¢m
    ax.plot([0, 50], [50, 100], 'k', linewidth=1)
    ax.plot([50, 100], [100, 50], 'k', linewidth=1)
    ax.plot([100, 50], [50, 0], 'k', linewidth=1)
    ax.plot([50, 0], [0, 50], 'k', linewidth=1)

    # H√¨nh thoi trung t√¢m
    ax.plot([0, 50, 100, 50, 0], [50, 100, 50, 0, 50], 'k', linewidth=1)
    # T·ªça ƒë·ªô t∆∞∆°ng ƒë·ªëi cho t·ª´ng nh√† (x, y)
    house_coords = {
        1: (50, 80),
        2: (25, 95),
        3: (10, 80),
        4: (25, 45),
        5: (15, 25),
        6: (25, 5),
        7: (50, 20),
        8: (75, 5),
        9: (95, 25),
        10: (75, 45),
        11: (95, 80),
        12: (75, 95),
    }   
   
    # Gom nh√≥m c√°c h√†nh tinh theo nh√†
    house_planets = {i: [] for i in range(1, 13)}
    for planet in planet_data:
        house = planet["Nh√†"]
        name = planet["H√†nh tinh"]
        if house:
            house_planets[house].append(name)

    # V·∫Ω t√™n h√†nh tinh t·∫°i v·ªã tr√≠ t·ª´ng nh√†
    for house, (x, y) in house_coords.items():
        labels = []
        for p in planet_data:
            if p["Nh√†"] == house:
                name = p["H√†nh tinh"]
                sign = p["Cung"].split()[-1]
                deg_str = p["V·ªã tr√≠"].split("¬∞")[0] + "¬∞"
                labels.append(f"{name} ({sign} {deg_str})")
        names = "\n".join(labels)
        ax.text(x, y, names, ha='center', va='center', fontsize=5, color='blue')
    
    return fig  

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
st.markdown("<h3 style='text-align: left;'>BI·ªÇU ƒê·ªí CHI√äM TINH</h3>", unsafe_allow_html=True)
fig = draw_chart(planet_data)
st.pyplot(fig, use_container_width=False)

df_planets = pd.DataFrame(planet_data)
st.dataframe(df_planets, use_container_width=True)

st.caption("üìç Ph√°t tri·ªÉn t·ª´ t√°c gi·∫£ Nguy·ªÖn Duy Tu·∫•n ‚Äì v·ªõi m·ª•c ƒë√≠ch ph·ª•ng s·ª± t√¢m linh v√† c·ªông ƒë·ªìng.")

